import { Request, Response } from 'express';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ SSE
const sseClients = new Set<Response>();

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º
const originalConsoleLog = console.log;
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
const originalConsoleInfo = console.info;
const originalConsoleDebug = console.debug;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
export const addSSEClient = (res: Response) => {
  sseClients.add(res);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  res.write(`data: ${JSON.stringify({ 
    type: 'connected', 
    message: '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ—Ç–æ–∫–æ–≤—ã–º –ª–æ–≥–∞–º' 
  })}\n\n`);
  
  console.log(`üì° [SSE] –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${sseClients.size}`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  res.on('close', () => {
    sseClients.delete(res);
    console.log(`üì° [SSE] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: ${sseClients.size}`);
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
export const broadcastLog = (logData: {
  level: 'info' | 'warn' | 'error' | 'debug';
  message: string;
  timestamp: string;
  source?: string;
  data?: any;
}) => {
  const message = `data: ${JSON.stringify(logData)}\n\n`;
  
  sseClients.forEach((client) => {
    try {
      client.write(message);
    } catch (error) {
      // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      sseClients.delete(client);
    }
  });
};

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
console.log = (...args: any[]) => {
  originalConsoleLog(...args);
  const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ª–æ–≥–∏ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
  broadcastLog({
    level: 'info',
    message,
    timestamp: new Date().toISOString(),
    source: 'console'
  });
};

console.error = (...args: any[]) => {
  originalConsoleError(...args);
  const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ');
  broadcastLog({
    level: 'error',
    message,
    timestamp: new Date().toISOString(),
    source: 'console'
  });
};

console.warn = (...args: any[]) => {
  originalConsoleWarn(...args);
  const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ');
  broadcastLog({
    level: 'warn',
    message,
    timestamp: new Date().toISOString(),
    source: 'console'
  });
};

console.info = (...args: any[]) => {
  originalConsoleInfo(...args);
  const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ');
  broadcastLog({
    level: 'info',
    message,
    timestamp: new Date().toISOString(),
    source: 'console'
  });
};

console.debug = (...args: any[]) => {
  originalConsoleDebug(...args);
  const message = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ');
  broadcastLog({
    level: 'debug',
    message,
    timestamp: new Date().toISOString(),
    source: 'console'
  });
};

// SSE endpoint –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–≥–∞–º
export const streamLogs = async (req: Request, res: Response) => {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');
    res.setHeader('X-Accel-Buffering', 'no'); // –í–∞–∂–Ω–æ –¥–ª—è nginx
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Headers', 'Cache-Control');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    addSSEClient(res);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±—É—Ñ–µ—Ä –Ω–µ–¥–∞–≤–Ω–∏—Ö –ª–æ–≥–æ–≤
    
  } catch (error) {
    console.error('Error in SSE stream:', error);
    res.status(500).end();
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ (–¥–ª—è REST API)
export const getRecentLogs = async (req: Request, res: Response) => {
  try {
    const { limit = 100 } = req.query;
    
    // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤
    res.json({
      success: true,
      data: {
        connectedClients: sseClients.size,
        message: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSE endpoint'
      }
    });
  } catch (error) {
    console.error('Error getting recent logs:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤' });
  }
};

