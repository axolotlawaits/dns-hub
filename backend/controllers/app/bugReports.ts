import { Request, Response } from 'express';
import { prisma } from '../../server.js';
import { z } from 'zod';

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å DNS Radio v2.4.7
const createBugReportSchema = z.object({
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
  deviceId: z.string().min(1),
  errorType: z.enum([
    'CRASH', 'NETWORK_ERROR', 'AUTHENTICATION_ERROR', 'MEDIA_ERROR',
    'DOWNLOAD_ERROR', 'PERMISSION_ERROR', 'STORAGE_ERROR', 'SOCKET_ERROR',
    'PERFORMANCE_ISSUE', 'UNKNOWN_ERROR'
  ]),
  errorMessage: z.string().min(1),
  severity: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']),
  appVersion: z.string().min(1),
  
  // –ü–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–∏–ª–∏–∞–ª–∞
  userId: z.string().optional(),
  userEmail: z.string().optional(),
  branchType: z.string().optional(),
  branchName: z.string().optional(),
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  androidVersion: z.string().optional(),
  deviceModel: z.string().optional(),
  deviceManufacturer: z.string().optional(),
  
  // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  memoryUsage: z.number().optional(),
  storageFree: z.number().optional(),
  networkType: z.enum(['WiFi', 'Mobile', 'Ethernet']).optional(),
  isOnline: z.boolean().optional(),
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç
  userAction: z.string().optional(),
  sessionId: z.string().optional(),
  stackTrace: z.string().optional(),
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  timestamp: z.string().datetime().optional(),
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON) - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è DNS Radio v2.4.7
  additionalData: z.object({
    // MAC –∞–¥—Ä–µ—Å –∏ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è
    macAddress: z.string().optional(),
    macMethod: z.enum([
      'NetworkInterface',
      'NetworkInterface_All', 
      'WifiManager_Legacy',
      'WifiManager_Modern',
      'WifiManager_ConnectionInfo',
      'BluetoothAdapter',
      'PseudoMac',
      'StaticFallback'
    ]).optional(),
    isRealMac: z.string().optional(), // "true" –∏–ª–∏ "false" –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    isPseudoMac: z.string().optional(), // "true" –∏–ª–∏ "false" –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    apiLevel: z.string().optional(),
    device: z.string().optional(),
    product: z.string().optional(),
    
    // –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
    buildVersion: z.string().optional(),
    kernelVersion: z.string().optional(),
    cpuArchitecture: z.string().optional(),
    totalMemory: z.number().optional(),
    availableMemory: z.number().optional(),
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    extra: z.record(z.any()).optional()
  }).optional(),
  
  // –°—Ç–∞—Ç—É—Å
  isAutoReport: z.boolean().default(true),
  isResolved: z.boolean().default(false),
  
  // –ü–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
  id: z.string().optional(), // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID, –Ω–æ –º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–π
  createdAt: z.string().datetime().optional() // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
});

const resolveBugReportSchema = z.object({
  reportId: z.string().uuid(),
  resolvedBy: z.string().optional(),
  resolutionNotes: z.string().optional()
});

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å DNS Radio v2.4.7)
export const createBugReport = async (req: Request, res: Response): Promise<any> => {
  try {
    const validatedData = createBugReportSchema.parse(req.body);
    
    // –ü–∞—Ä—Å–∏–º timestamp –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    const timestamp = validatedData.timestamp 
      ? new Date(validatedData.timestamp)
      : new Date();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const { id, createdAt, ...dataToSave } = validatedData;

    const bugReport = await prisma.bugReport.create({
      data: {
        ...dataToSave,
        timestamp,
        additionalData: validatedData.additionalData || {}
      }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MAC –∞–¥—Ä–µ—Å–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const macInfo = validatedData.additionalData;
    if (macInfo?.macAddress) {
      const macType = macInfo.isRealMac === 'true' ? 'REAL' : 'PSEUDO';
      const deviceInfo = macInfo.device ? ` (${macInfo.device})` : '';
      const apiInfo = macInfo.apiLevel ? ` API:${macInfo.apiLevel}` : '';
      
      console.log(`‚úÖ [BugReport] Created report ${bugReport.id} for device ${bugReport.deviceId}${deviceInfo}${apiInfo}`);
      console.log(`   üì± MAC: ${macInfo.macAddress} (${macType}, Method: ${macInfo.macMethod || 'Unknown'})`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Å–µ–≤–¥–æ-MAC
      if (macInfo.isPseudoMac === 'true') {
        console.warn(`‚ö†Ô∏è  [BugReport] Device ${bugReport.deviceId} using PSEUDO-MAC - all real methods failed`);
      }
    } else {
      console.log(`‚úÖ [BugReport] Created report ${bugReport.id} for device ${bugReport.deviceId} (no MAC info)`);
    }

    return res.status(201).json({
      success: true,
      data: bugReport,
      message: 'Bug report created successfully'
    });
  } catch (error) {
    console.error('‚ùå [BugReport] Error creating report:', error);
    
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        error: 'Validation error',
        details: error.errors
      });
    }

    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export const getBugReports = async (req: Request, res: Response): Promise<any> => {
  try {
    const {
      deviceId,
      severity,
      resolved,
      errorType,
      branchType,
      userEmail,
      page = '1',
      limit = '50',
      days
    } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const where: any = {};

    if (deviceId) where.deviceId = deviceId as string;
    if (severity) where.severity = severity as string;
    if (resolved !== undefined) where.isResolved = resolved === 'true';
    if (errorType) where.errorType = errorType as string;
    if (branchType) where.branchType = branchType as string;
    if (userEmail) where.userEmail = userEmail as string;

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º
    if (days) {
      const daysAgo = new Date();
      daysAgo.setDate(daysAgo.getDate() - parseInt(days as string));
      where.createdAt = { gte: daysAgo };
    }

    const pageNum = parseInt(page as string);
    const limitNum = parseInt(limit as string);
    const skip = (pageNum - 1) * limitNum;

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const [bugReports, total] = await Promise.all([
      prisma.bugReport.findMany({
        where,
        orderBy: { createdAt: 'desc' },
        skip,
        take: limitNum
      }),
      prisma.bugReport.count({ where })
    ]);

    return res.json({
      success: true,
      data: bugReports,
      pagination: {
        page: pageNum,
        limit: limitNum,
        total,
        pages: Math.ceil(total / limitNum)
      }
    });
  } catch (error) {
    console.error('‚ùå [BugReport] Error getting reports:', error);
    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
export const getBugReportStatistics = async (req: Request, res: Response): Promise<any> => {
  try {
    const { deviceId, days = '7' } = req.query;
    
    const daysAgo = new Date();
    daysAgo.setDate(daysAgo.getDate() - parseInt(days as string));

    const where: any = {
      createdAt: { gte: daysAgo }
    };

    if (deviceId) where.deviceId = deviceId as string;

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    const totalErrors = await prisma.bugReport.count({ where });

    // –û—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
    const errorsByType = await prisma.bugReport.groupBy({
      by: ['errorType'],
      where,
      _count: { errorType: true }
    });

    // –û—à–∏–±–∫–∏ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    const errorsBySeverity = await prisma.bugReport.groupBy({
      by: ['severity'],
      where,
      _count: { severity: true }
    });

    // –û—à–∏–±–∫–∏ –ø–æ –¥–Ω—è–º
    const errorsByDay = await prisma.bugReport.groupBy({
      by: ['createdAt'],
      where,
      _count: { createdAt: true }
    });

    // –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
    const mostCommonErrors = await prisma.bugReport.groupBy({
      by: ['errorMessage'],
      where,
      _count: { errorMessage: true },
      orderBy: { _count: { errorMessage: 'desc' } },
      take: 10
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é
    const resolvedCount = await prisma.bugReport.count({
      where: { ...where, isResolved: true }
    });

    const resolutionRate = totalErrors > 0 ? resolvedCount / totalErrors : 0;

    // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (–≤ —á–∞—Å–∞—Ö)
    const resolvedReports = await prisma.bugReport.findMany({
      where: { ...where, isResolved: true, resolvedAt: { not: null } },
      select: { createdAt: true, resolvedAt: true }
    });

    const averageResolutionTime = resolvedReports.length > 0
      ? resolvedReports.reduce((sum, report) => {
          const resolutionTime = report.resolvedAt!.getTime() - report.createdAt.getTime();
          return sum + (resolutionTime / (1000 * 60 * 60)); // –≤ —á–∞—Å–∞—Ö
        }, 0) / resolvedReports.length
      : 0;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    const errorsByDayFormatted: Record<string, number> = {};
    errorsByDay.forEach(item => {
      const date = item.createdAt.toISOString().split('T')[0];
      errorsByDayFormatted[date] = item._count.createdAt;
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ MAC –∞–¥—Ä–µ—Å–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ —Å MAC –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π)
    const reportsWithMac = await prisma.bugReport.findMany({
      where: {
        ...where,
        additionalData: {
          path: ['macAddress'],
          not: null
        }
      },
      select: {
        additionalData: true,
        deviceId: true,
        deviceModel: true,
        deviceManufacturer: true
      }
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º MAC –º–µ—Ç–æ–¥—ã
    const macMethods: Record<string, number> = {};
    const realMacCount = { real: 0, pseudo: 0 };
    const deviceMacStats: Record<string, { real: number, pseudo: number, methods: Record<string, number> }> = {};

    reportsWithMac.forEach(report => {
      const macInfo = report.additionalData as any;
      if (macInfo?.macMethod) {
        macMethods[macInfo.macMethod] = (macMethods[macInfo.macMethod] || 0) + 1;
        
        if (macInfo.isRealMac === 'true') {
          realMacCount.real++;
        } else if (macInfo.isPseudoMac === 'true') {
          realMacCount.pseudo++;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        const deviceKey = `${report.deviceManufacturer || 'Unknown'} ${report.deviceModel || 'Unknown'}`;
        if (!deviceMacStats[deviceKey]) {
          deviceMacStats[deviceKey] = { real: 0, pseudo: 0, methods: {} };
        }
        
        if (macInfo.isRealMac === 'true') {
          deviceMacStats[deviceKey].real++;
        } else if (macInfo.isPseudoMac === 'true') {
          deviceMacStats[deviceKey].pseudo++;
        }
        
        deviceMacStats[deviceKey].methods[macInfo.macMethod] = 
          (deviceMacStats[deviceKey].methods[macInfo.macMethod] || 0) + 1;
      }
    });

    const statistics = {
      totalErrors,
      errorsByType: errorsByType.reduce((acc, item) => {
        acc[item.errorType] = item._count.errorType;
        return acc;
      }, {} as Record<string, number>),
      errorsBySeverity: errorsBySeverity.reduce((acc, item) => {
        acc[item.severity] = item._count.severity;
        return acc;
      }, {} as Record<string, number>),
      errorsByDay: errorsByDayFormatted,
      mostCommonErrors: mostCommonErrors.map(item => ({
        message: item.errorMessage,
        count: item._count.errorMessage
      })),
      averageResolutionTime: Math.round(averageResolutionTime * 100) / 100,
      resolutionRate: Math.round(resolutionRate * 100) / 100,
      
      // –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ MAC –∞–¥—Ä–µ—Å–∞–º
      macStatistics: {
        totalReportsWithMac: reportsWithMac.length,
        realMacCount: realMacCount.real,
        pseudoMacCount: realMacCount.pseudo,
        macMethods: macMethods,
        deviceMacStats: deviceMacStats,
        pseudoMacRate: reportsWithMac.length > 0 
          ? Math.round((realMacCount.pseudo / reportsWithMac.length) * 100) / 100 
          : 0
      }
    };

    return res.json({
      success: true,
      data: statistics
    });
  } catch (error) {
    console.error('‚ùå [BugReport] Error getting statistics:', error);
    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
};

// –û—Ç–º–µ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ
export const resolveBugReport = async (req: Request, res: Response): Promise<any> => {
  try {
    const validatedData = resolveBugReportSchema.parse(req.body);
    
    const bugReport = await prisma.bugReport.update({
      where: { id: validatedData.reportId },
      data: {
        isResolved: true,
        resolvedAt: new Date(),
        resolvedBy: validatedData.resolvedBy,
        resolutionNotes: validatedData.resolutionNotes
      }
    });

    console.log(`‚úÖ [BugReport] Resolved report ${bugReport.id}`);

    return res.json({
      success: true,
      data: bugReport,
      message: 'Bug report resolved successfully'
    });
  } catch (error) {
    console.error('‚ùå [BugReport] Error resolving report:', error);
    
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        error: 'Validation error',
        details: error.errors
      });
    }

    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ ID
export const getBugReportById = async (req: Request, res: Response): Promise<any> => {
  try {
    const { id } = req.params;

    const bugReport = await prisma.bugReport.findUnique({
      where: { id }
    });

    if (!bugReport) {
      return res.status(404).json({
        success: false,
        error: 'Bug report not found'
      });
    }

    return res.json({
      success: true,
      data: bugReport
    });
  } catch (error) {
    console.error('‚ùå [BugReport] Error getting report by ID:', error);
    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
export const getBugReportsByDevice = async (req: Request, res: Response): Promise<any> => {
  try {
    const { deviceId } = req.params;
    const { limit = '20' } = req.query;

    const bugReports = await prisma.bugReport.findMany({
      where: { deviceId },
      orderBy: { createdAt: 'desc' },
      take: parseInt(limit as string)
    });

    return res.json({
      success: true,
      data: bugReports
    });
  } catch (error) {
    console.error('‚ùå [BugReport] Error getting reports by device:', error);
    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
};
