import { Bot, Context, session, SessionFlavor } from 'grammy';
import { Notifications } from '@prisma/client';
import axios from 'axios';
import { prisma, API } from '../../server.js';

// 1. –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
interface SessionData {
  userData?: {
    id: string;
    name: string;
  };
  // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏
}

type MyContext = Context & SessionFlavor<SessionData>;

// 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
class TelegramService {
  private static instance: TelegramService;
  private bot: Bot<MyContext> | null = null;
  private isRunning = false;
  private readonly MAX_RETRIES = 3;
  private retryCount = 0;

  private constructor() {
    this.initializeBot();
  }

  public static getInstance(): TelegramService {
    if (!TelegramService.instance) {
      TelegramService.instance = new TelegramService();
    }
    return TelegramService.instance;
  }

  // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  private initializeBot(): void {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.error('TELEGRAM_BOT_TOKEN not found');
      return;
    }
    
    const botName = process.env.TELEGRAM_BOT_NAME;
    if (!botName) {
      console.error('TELEGRAM_BOT_NAME not found');
      return;
    }
    
    this.bot = new Bot<MyContext>(token);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
    this.bot.use(
      session({
        initial: (): SessionData => ({}),
      })
    );

    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.command('start', async (ctx) => {
      const token = ctx.match.trim();
      if (!token) {
        return ctx.reply('–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      }

      try {
        const user = await prisma.user.findFirst({
          where: { telegramLinkToken: token },
        });

        if (!user) {
          return ctx.reply('‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞');
        }

        await prisma.user.update({
          where: { id: user.id },
          data: {
            telegramChatId: ctx.chat.id.toString(),
            telegramLinkToken: null,
          },
        });

        await this.notifyFrontend(user.id);
        await ctx.reply(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é (–ø—Ä–∏–º–µ—Ä)
        ctx.session.userData = {
          id: user.id,
          name: user.name,
        };
      } catch (error) {
        console.error('Link error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
      }
    });

    // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err) => {
      console.error('Bot error:', err);
    });
  }

  // 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  public async launch(): Promise<boolean> {
    if (this.isRunning) {
      return false;
    }
    
    if (!this.bot) {
      console.error('Bot not initialized');
      return false;
    }

    try {
      await this.bot.start({
        drop_pending_updates: true,
        allowed_updates: ['message', 'callback_query'],
      });

      this.isRunning = true;
      this.retryCount = 0;
      return true;
    } catch (error) {
      console.error('Failed to start bot:', error);

      if (this.retryCount < this.MAX_RETRIES) {
        this.retryCount++;
        const delay = Math.min(2000 * this.retryCount, 10000);
        await new Promise((resolve) => setTimeout(resolve, delay));
        return this.launch();
      }

      return false;
    }
  }

  // 7. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  public async stop(): Promise<void> {
    if (!this.isRunning || !this.bot) return;

    try {
      await this.bot.stop();
      this.isRunning = false;
    } catch (error) {
      console.error('Error stopping bot:', error);
    }
  }

  // 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  public async sendNotification(
    notification: Notifications,
    chatId: string
  ): Promise<boolean> {
    if (!this.isRunning || !this.bot) {
      console.error('Bot is not running');
      return false;
    }

    try {
      await this.bot.api.sendMessage(
        chatId,
        `üîî ${notification.title}\n\n${notification.message}`,
        { parse_mode: 'Markdown' }
      );
      return true;
    } catch (error) {
      console.error('Send error:', error);
      if (error instanceof Error && error.message.includes('chat not found')) {
        await this.handleInvalidChat(chatId);
      }
      return false;
    }
  }

  // 9. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async notifyFrontend(userId: string): Promise<void> {
    try {
      await axios.post(`${API}/telegram/status/${userId}`, { userId });
    } catch (error) {
      console.error('Frontend notify error:', error);
    }
  }

  private async handleInvalidChat(chatId: string): Promise<void> {
    try {
      await prisma.user.updateMany({
        where: { telegramChatId: chatId },
        data: { telegramChatId: null },
      });
    } catch (error) {
      console.error('Database error in handleInvalidChat:', error);
    }
  }

  // 10. –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
  public get status() {
    return {
      isRunning: this.isRunning,
      retryCount: this.retryCount,
      botInitialized: !!this.bot,
      hasToken: !!process.env.TELEGRAM_BOT_TOKEN,
      hasBotName: !!process.env.TELEGRAM_BOT_NAME,
    };
  }

  // 11. –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
  public async restart(): Promise<boolean> {
    await this.stop();
    this.retryCount = 0;
    this.initializeBot();
    return this.launch();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const telegramService = TelegramService.getInstance();