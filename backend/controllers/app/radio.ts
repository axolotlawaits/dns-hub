import { Request, Response } from "express";
import fs from 'fs';
import path from 'path';
import { prisma } from '../../server.js';
import { heartbeatStore } from './device.js';
import { SocketIOService } from '../../socketio.js';
import { decodeRussianFileName } from '../../utils/format.js';

// –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const statsCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
const notifyStreamsUpdate = async (branchType: string) => {
  try {
    console.log(`Notifying devices about stream update for branch type: ${branchType}`);
    const socketService = SocketIOService.getInstance();
    socketService.emit('device_streams_updated', {
      branchType: branchType
    });
  } catch (error) {
    console.error('Error notifying streams update:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π
export const cleanupOldMusicFolders = async () => {
  try {
    console.log('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π...');
    const musicPath = './public/retail/radio/music';
    
    if (!fs.existsSync(musicPath)) {
      console.log('üìÅ –ü–∞–ø–∫–∞ retail/radio/music –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É');
      return;
    }

    const folders = fs.readdirSync(musicPath);
    const currentDate = new Date();
    const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0');
    const currentYear = currentDate.getFullYear();
    const currentFolder = `${currentMonth}-${currentYear}`;
    
    let deletedCount = 0;
    
    for (const folder of folders) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
      if (folder === currentFolder) {
        console.log(`‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É: ${folder}`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–∞–ø–∫–∏ (MM-YYYY)
      const folderRegex = /^\d{2}-\d{4}$/;
      if (!folderRegex.test(folder)) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: ${folder}`);
        continue;
      }
      
      const folderPath = path.join(musicPath, folder);
      const stats = fs.statSync(folderPath);
      
      if (stats.isDirectory()) {
        // –£–¥–∞–ª—è–µ–º –í–°–ï –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É: ${folder} (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É ${currentFolder})`);
        fs.rmSync(folderPath, { recursive: true, force: true });
        deletedCount++;
        console.log(`‚úÖ –ü–∞–ø–∫–∞ ${folder} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
      }
    }
    
    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –ø–∞–ø–æ–∫.`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π:', error);
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –º–µ—Å—è—Ü–∞
const getCurrentMonthFolder = (): string => {
  const currentDate = new Date();
  const month = String(currentDate.getMonth() + 1).padStart(2, '0');
  const year = currentDate.getFullYear();
  return `${month}-${year}`;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –º—É–∑—ã–∫–∏
const ensureMusicFolder = (folderName?: string): string => {
  const folder = folderName || getCurrentMonthFolder();
  const musicPath = `./public/retail/radio/music/${folder}`;
  const baseMusicPath = './public/retail/radio/music';
  
  if (!fs.existsSync(baseMusicPath)) {
    fs.mkdirSync(baseMusicPath, { recursive: true });
  }
  if (!fs.existsSync(musicPath)) {
    fs.mkdirSync(musicPath, { recursive: true });
  }
  
  return musicPath;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –º—É–∑—ã–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
export const createMusicFolder = async (req: Request, res: Response): Promise<any> => {
  try {
    const folderName = getCurrentMonthFolder();
    const musicPath = ensureMusicFolder(folderName);
    
    return res.status(200).json({ 
      success: true, 
      message: '–ü–∞–ø–∫–∞ –¥–ª—è –º—É–∑—ã–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 
      folderName, 
      path: musicPath 
    });
  } catch (error) {
    console.error('Error creating music folder:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –¥–ª—è –º—É–∑—ã–∫–∏' });
  }
};

export const uploadMusic = async (req: Request, res: Response): Promise<any> => {
  try {
    console.log('Upload request received:', {
      body: req.body,
      file: req.file,
      files: req.files
    });
    
    if (!req.file) {
      console.log('No file in request');
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }
    
    const folderName = getCurrentMonthFolder();
    const fileName = req.file.originalname;
    const filePath = req.file.path; // –§–∞–π–ª —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä—è middleware
    
    console.log('File details:', {
      originalName: req.file.originalname,
      filePath: filePath,
      fileExists: fs.existsSync(filePath),
      fileSize: req.file.size
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(filePath)) {
      console.error('File does not exist:', filePath);
      return res.status(500).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    return res.status(200).json({ 
      success: true, 
      message: '–ú—É–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 
      fileName, 
      folderName, 
      path: filePath 
    });
  } catch (error) {
    console.error('Error uploading music:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏' });
  }
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫ –º—É–∑—ã–∫–∏
const getMusicFoldersAsync = (): Promise<any[]> => {
  return new Promise((resolve) => {
    setImmediate(() => {
      try {
        const musicPath = './public/retail/radio/music';
        console.log('Getting music folders from:', musicPath);
        console.log('Music path exists:', fs.existsSync(musicPath));
        
        if (!fs.existsSync(musicPath)) {
          console.log('Music path does not exist, creating...');
          fs.mkdirSync(musicPath, { recursive: true });
          resolve([]);
          return;
        }
        
        const items = fs.readdirSync(musicPath, { withFileTypes: true });
        console.log('All items in music path:', items.map(i => ({ name: i.name, isDirectory: i.isDirectory() })));
        
        const folders = items
          .filter(i => i.isDirectory())
          .map(dirent => {
            const folderPath = path.join(musicPath, dirent.name);
            const stats = fs.statSync(folderPath);
            return {
              name: dirent.name,
              path: folderPath,
              created: stats.birthtime
            };
          })
          .sort((a, b) => new Date(b.created).getTime() - new Date(a.created).getTime());
        
        console.log('Found music folders:', folders);
        resolve(folders);
      } catch (error) {
        console.error('Error getting music folders:', error);
        resolve([]);
      }
    });
  });
};

export const getMusicFolders = async (req: Request, res: Response): Promise<any> => {
  try {
    const folders = await getMusicFoldersAsync();
    return res.status(200).json({ success: true, folders });
  } catch (error) {
    console.error('Error getting music folders:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –º—É–∑—ã–∫–∏' });
  }
};

export const getMusicInFolder = async (req: Request, res: Response): Promise<any> => {
  try {
    const { folderName } = req.params;
    if (!folderName) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }
    const folderPath = `./public/retail/radio/music/${folderName}`;
    if (!fs.existsSync(folderPath)) {
      return res.status(404).json({ error: '–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    const files = fs.readdirSync(folderPath)
      .filter(file => ['.mp3', '.wav', '.ogg', '.m4a', '.flac'].includes(path.extname(file).toLowerCase()))
      .map(file => {
        const filePath = path.join(folderPath, file);
        const stats = fs.statSync(filePath);
        return { name: file, size: stats.size, created: stats.birthtime, modified: stats.mtime, path: `/retail/radio/music/${folderName}/${file}` };
      })
      .sort((a, b) => new Date(b.modified).getTime() - new Date(a.modified).getTime());
    return res.status(200).json({ success: true, folderName, files });
  } catch (error) {
    console.error('Error getting music in folder:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º—É–∑—ã–∫–∏' });
  }
};

export const deleteMusicFolder = async (req: Request, res: Response): Promise<any> => {
  try {
    const { folderName } = req.params;
    if (!folderName) return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    const folderPath = `./public/retail/radio/music/${folderName}`;
    if (!fs.existsSync(folderPath)) return res.status(404).json({ error: '–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    fs.rmSync(folderPath, { recursive: true, force: true });
    return res.status(200).json({ success: true, message: '–ü–∞–ø–∫–∞ –º—É–∑—ã–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', folderName });
  } catch (error) {
    console.error('Error deleting music folder:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –º—É–∑—ã–∫–∏' });
  }
};

// ===== Admin-related (moved) =====
export const getDevicesByBranches = async (req: Request, res: Response) => {
  try {
    const devices = await prisma.devices.findMany({
      include: { branch: { select: { uuid: true, name: true, typeOfDist: true, city: true, address: true } } },
      orderBy: [ { branch: { name: 'asc' } }, { createdAt: 'desc' } ]
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è O(1) –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–º–µ—Å—Ç–æ reduce
    const devicesByBranches = new Map();
    devices.forEach(device => {
      const bid = device.branchId;
      if (!devicesByBranches.has(bid)) {
        devicesByBranches.set(bid, { branch: device.branch, devices: [] });
      }
      devicesByBranches.get(bid).devices.push(device);
    });

    const result = Array.from(devicesByBranches.values());
    res.json({ success: true, data: result });
  } catch (error) {
    console.error('Error getting devices by branches:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤' });
  }
};

export const getDevicesStatus = async (req: Request, res: Response) => {
  try {
    const { branchId } = req.query as { branchId?: string };
    const where: any = {};
    if (branchId) where.branchId = String(branchId);

    const devices = await prisma.devices.findMany({ 
      where, 
      select: { id: true, branchId: true, lastSeen: true } 
    });
    const now = Date.now();
    const ONLINE_THRESHOLD_MS = 2 * 60 * 1000;

    const data = devices.map((d: any) => {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: heartbeatStore (–ø–∞–º—è—Ç—å) > lastSeen (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
      const lastSeenMem = heartbeatStore.get(d.id);
      const lastSeenDb = d.lastSeen ? new Date(d.lastSeen).getTime() : null;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const lastSeenTime = lastSeenMem || lastSeenDb;
      const online = lastSeenTime ? (now - lastSeenTime <= ONLINE_THRESHOLD_MS) : false;
      
      return { 
        deviceId: d.id, 
        branchId: d.branchId, 
        online, 
        lastSeen: lastSeenTime ? new Date(lastSeenTime).toISOString() : null,
        source: lastSeenMem ? 'memory' : (lastSeenDb ? 'database' : 'none')
      };
    });

    res.json({ success: true, data });
  } catch (error) {
    console.error('Error getting devices status:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤' });
  }
};

export const getDevicesStatusPing = async (req: Request, res: Response) => {
  try {
    const { branchId } = req.query as { branchId?: string };
    const where: any = {};
    if (branchId) where.branchId = String(branchId);

    const devices = await prisma.devices.findMany({ where, select: { id: true, branchId: true } });
    const deviceIds = devices.map(d => d.id);

    const socketService = SocketIOService.getInstance();
    const pingResults = await socketService.pingDevices(deviceIds, 1500);

    const data = devices.map((d) => ({ deviceId: d.id, branchId: d.branchId, online: !!pingResults[d.id]?.online, rttMs: pingResults[d.id]?.rttMs ?? null }));

    res.json({ success: true, data });
  } catch (error) {
    console.error('Error getting devices status ping:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤' });
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
const validateTimeFormat = (time: string): boolean => {
  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
  return timeRegex.test(time);
};

export const updateDeviceTime = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const { timeFrom, timeUntil } = req.body as any;
    
    if (!validateTimeFormat(timeFrom) || !validateTimeFormat(timeUntil)) {
      return res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM' });
    }
    
    const device = await prisma.devices.update({ 
      where: { id: deviceId }, 
      data: { timeFrom, timeUntil }, 
      include: { branch: { select: { name: true, typeOfDist: true } } } 
    });
    
    try {
      const socketService = SocketIOService.getInstance();
      (socketService as any)?.io?.emit('device_time_updated', { deviceId, timeFrom, timeUntil });
    } catch (e) {
      console.warn('Socket emit device_time_updated failed', e);
    }
    
    res.json({ success: true, data: device, message: '–í—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('Error updating device time:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
  }
};

export const updateBranchDevicesTime = async (req: Request, res: Response) => {
  try {
    const { branchId } = req.params as any;
    const { timeFrom, timeUntil } = req.body as any;
    
    if (!validateTimeFormat(timeFrom) || !validateTimeFormat(timeUntil)) {
      return res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM' });
    }
    
    const result = await prisma.devices.updateMany({ 
      where: { branchId }, 
      data: { timeFrom, timeUntil } 
    });
    
    try {
      const socketService = SocketIOService.getInstance();
      (socketService as any)?.io?.emit('device_time_updated', { branchId, timeFrom, timeUntil });
    } catch (e) {
      console.warn('Socket emit device_time_updated (branch) failed', e);
    }
    
    res.json({ 
      success: true, 
      data: { updatedCount: result.count }, 
      message: `–í—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${result.count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤` 
    });
  } catch (error) {
    console.error('Error updating branch devices time:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ñ–∏–ª–∏–∞–ª–∞' });
  }
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const countMusicFilesAsync = (): Promise<number> => {
  return new Promise((resolve) => {
    setImmediate(() => {
      try {
        const musicPath = './public/retail/radio/music';
        console.log('Checking music path:', musicPath);
        console.log('Music path exists:', fs.existsSync(musicPath));
        
        if (!fs.existsSync(musicPath)) {
          console.log('Music path does not exist, creating...');
          fs.mkdirSync(musicPath, { recursive: true });
          resolve(0);
          return;
        }
        
        const folders = fs.readdirSync(musicPath, { withFileTypes: true })
          .filter(dirent => dirent.isDirectory())
          .map(dirent => dirent.name);
        
        console.log('Found music folders:', folders);
        
        let totalFiles = 0;
        for (const folder of folders) {
          const folderPath = path.join(musicPath, folder);
          console.log('Checking folder:', folderPath);
          const files = fs.readdirSync(folderPath)
            .filter(file => ['.mp3', '.wav', '.ogg', '.m4a', '.flac'].includes(path.extname(file).toLowerCase()));
          console.log(`Files in ${folder}:`, files);
          totalFiles += files.length;
        }
        
        console.log('Total music files found:', totalFiles);
        resolve(totalFiles);
      } catch (error) {
        console.error('Error counting music files:', error);
        resolve(0);
      }
    });
  });
};

export const getDevicesStats = async (req: Request, res: Response) => {
  try {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏ —Å –º—É–∑—ã–∫–æ–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await cleanupOldMusicFolders();
    
    const cacheKey = 'devices_stats';
    const cached = statsCache.get(cacheKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return res.json({ success: true, data: cached.data });
    }

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const [totalDevices, totalBranches, topBranches] = await Promise.all([
      prisma.devices.count(),
      prisma.branch.count({
        where: { status: { in: [0, 1] } } // –¢–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0 –∏–ª–∏ 1
      }),
      prisma.branch.findMany({
        select: { name: true, typeOfDist: true, _count: { select: { devices: true } } },
        where: { 
          devices: { some: {} },
          status: { in: [0, 1] } // –¢–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0 –∏–ª–∏ 1
        },
        orderBy: { devices: { _count: 'desc' } },
        take: 5
      })
    ]);

    const socketService = SocketIOService.getInstance();
    const activeDevices = socketService.getConnectedDeviceIds().length;
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
    const totalMusicFiles = await countMusicFilesAsync();
    
    const data = { totalDevices, activeDevices, totalBranches, totalMusicFiles, topBranches };
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    statsCache.set(cacheKey, { data, timestamp: Date.now() });
    
    res.json({ success: true, data });
  } catch (error) {
    console.error('Error getting devices stats:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
};

export const getDeviceInfo = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const device = await prisma.devices.findUnique({ where: { id: deviceId }, include: { branch: { select: { name: true, typeOfDist: true, city: true, address: true } } } });
    if (!device) return res.status(404).json({ success: false, error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    res.json({ success: true, data: device });
  } catch (error) {
    console.error('Error getting device info:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ' });
  }
};

export const actionRestartApp = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    console.log('Restart app request for device:', deviceId);
    
    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_restart_app');
    
    console.log('Restart app result:', {
      deviceId,
      ok: result.ok,
      error: result.error,
      data: result.data
    });
    
    if (!result.ok) {
      console.log('Device restart failed:', result.error);
      return res.status(400).json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    }
    
    const ok = (result.data as any)?.ok !== false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞
    if (!ok) {
      console.log('Device restart rejected by device');
      return res.status(400).json({ success: false, error: 'RESTART_FAILED' });
    }
    
    console.log('Device restart successful');
    res.json({ success: true, data: result.data ?? null, message: '–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('Error sending restart app:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã' });
  }
};

export const actionGetTime = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_get_time');
    if (!result.ok) {
      return res.json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    }
    const data: any = result.data || {};
    
    // Handle case where data might be a string representation
    let deviceTimeMs = data.deviceTimeMs;
    if (!deviceTimeMs && typeof data === 'string') {
      // Try to parse string format like '{deviceTimeMs=1756880475288, timezone=Europe/Moscow}'
      const match = data.match(/deviceTimeMs=(\d+)/);
      if (match) {
        deviceTimeMs = parseInt(match[1]);
      }
    }
    
    if (!deviceTimeMs) {
      return res.json({ success: false, error: 'NO_TIME_DATA' });
    }
    
    // Ensure we have proper data structure
    const responseData = {
      deviceTimeMs: deviceTimeMs,
      timezone: data.timezone || 'Europe/Moscow'
    };
    res.json({ success: true, data: responseData });
  } catch (error) {
    console.error('Error requesting device time:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
export const actionSyncTime = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const socketService = SocketIOService.getInstance();
    const serverTime = new Date().toISOString();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_sync_time', { serverTime });
    if (!result.ok) return res.json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    res.json({ success: true, data: { serverTime, deviceTime: result.data } });
  } catch (error) {
    console.error('Error syncing time:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏' });
  }
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é
export const actionSetTime = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const { dateTime } = req.body;
    
    if (!dateTime) {
      return res.status(400).json({ success: false, error: 'dateTime –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_set_time', { dateTime });
    if (!result.ok) return res.json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    res.json({ success: true, data: result.data });
  } catch (error) {
    console.error('Error setting time:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const actionGetDeviceStatus = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_get_status');
    if (!result.ok) return res.json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    
    // Parse the data if it's a string representation
    let parsedData = result.data;
    if (typeof result.data === 'string') {
      try {
        // Parse string like '{batteryLevel=100, isPlaying=false, currentMonth=09-2025, currentWifiSSID=–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, currentWifiBSSID=, appVersion=1.0}'
        const dataString = result.data.replace(/[{}]/g, '');
        const pairs = dataString.split(', ');
        const parsed: any = {};
        
        for (const pair of pairs) {
          const [key, value] = pair.split('=');
          if (key && value !== undefined) {
            // Convert numeric values
            if (key === 'batteryLevel' || key === 'isPlaying') {
              parsed[key] = key === 'isPlaying' ? (value === 'true') : parseInt(value);
            } else {
              parsed[key] = value;
            }
          }
        }
        
        parsedData = parsed;
      } catch (parseError) {
        console.error('Error parsing device status data:', parseError);
        // Keep original data if parsing fails
      }
    }
    
    res.json({ success: true, data: parsedData });
  } catch (error) {
    console.error('Error getting device status:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export const actionGetAppVersion = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_get_app_version');
    if (!result.ok) return res.json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    
    res.json({ success: true, data: { appVersion: result.data } });
  } catch (error) {
    console.error('Error getting app version:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' });
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi
export const actionConfigureWifi = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const { ssid, password, securityType = 'WPA' } = req.body;
    
    if (!ssid) {
      return res.status(400).json({ success: false, error: 'ssid –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_configure_wifi', { 
      ssid, 
      password, 
      securityType 
    });
    if (!result.ok) return res.json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    res.json({ success: true, data: result.data });
  } catch (error) {
    console.error('Error configuring WiFi:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WiFi' });
  }
};

export const actionReboot = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_reboot');
    if (!result.ok) return res.status(400).json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    const ok = (result.data as any)?.ok === true;
    if (!ok) return res.status(400).json({ success: false, error: (result.data as any)?.error || 'NOT_SUPPORTED' });
    res.json({ success: true, data: result.data ?? null, message: '–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('Error sending reboot:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã' });
  }
};

export const actionUpdateApp = async (req: Request, res: Response) => {
  try {
    const { deviceId } = req.params as any;
    const { apkUrl, version } = req.body as any;
    if (!apkUrl) return res.status(400).json({ success: false, error: 'apkUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    const socketService = SocketIOService.getInstance();
    const result = await socketService.sendToDeviceWithAck(deviceId, 'device_update_app', { apkUrl, version });
    if (!result.ok) return res.status(400).json({ success: false, error: result.error || 'DEVICE_OFFLINE' });
    const ok = (result.data as any)?.ok !== false;
    if (!ok) return res.status(400).json({ success: false, error: 'UPDATE_REJECTED' });
    res.json({ success: true, data: result.data ?? null, message: '–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('Error sending update app:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã' });
  }
};




// ===== Radio Streams Functions =====

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤
const ensureStreamFolder = (): string => {
  const streamPath = './public/retail/radio/stream';
  
  if (!fs.existsSync(streamPath)) {
    fs.mkdirSync(streamPath, { recursive: true });
  }
  
  return streamPath;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤
export const getRadioStreams = async (req: Request, res: Response): Promise<any> => {
  try {
    const streams = await prisma.radioStream.findMany({
      orderBy: { createdAt: 'desc' }
    });

    return res.status(200).json({ success: true, data: streams });
  } catch (error) {
    console.error('Error getting radio streams:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∞
export const createRadioStream = async (req: Request, res: Response): Promise<any> => {
  try {
    console.log('Creating radio stream with data:', req.body);
    console.log('Request file:', req.file);
    console.log('Request files:', req.files);
    console.log('Content-Type:', req.headers['content-type']);
    const { name, branchTypeOfDist, frequencySongs, fadeInDuration, volumeLevel, startDate, endDate } = req.body;

    console.log('Parsed data:', {
      name,
      branchTypeOfDist,
      frequencySongs,
      fadeInDuration,
      volumeLevel,
      startDate,
      endDate
    });

    let attachmentPath = null;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if (req.file) {
      console.log('File uploaded:', req.file);
      console.log('File path:', req.file.path);
      console.log('File exists:', fs.existsSync(req.file.path));
      
      // –§–∞–π–ª —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä—è middleware
      if (fs.existsSync(req.file.path)) {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        const correctedFileName = decodeRussianFileName(req.file.originalname);
        console.log('File name encoding correction:', {
          original: req.file.originalname,
          corrected: correctedFileName
        });
        attachmentPath = correctedFileName;
        console.log('Attachment path set to:', attachmentPath);
      } else {
        console.error('File does not exist at path:', req.file.path);
        attachmentPath = null;
      }
    } else {
      console.log('No file uploaded');
    }

    const stream = await prisma.radioStream.create({
      data: {
        name,
        branchTypeOfDist,
        frequencySongs: parseInt(frequencySongs) || 5,
        fadeInDuration: parseInt(fadeInDuration) || 2,
        volumeLevel: parseInt(volumeLevel) || 80,
        startDate: new Date(startDate),
        endDate: endDate ? new Date(endDate) : null,
        attachment: attachmentPath
      }
    });

    console.log('Created stream:', stream);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
    await notifyStreamsUpdate(stream.branchTypeOfDist);
    
    return res.status(201).json({ success: true, data: stream });
  } catch (error: any) {
    console.error('Error creating radio stream:', error);
    console.error('Error details:', error.message);
    console.error('Error stack:', error.stack);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∞', details: error.message });
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ä–æ–ª–∏–∫–∞ –¥–ª—è —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∞
export const uploadStreamRoll = async (req: Request, res: Response): Promise<any> => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const { streamId } = req.body;
    if (!streamId) {
      return res.status(400).json({ error: 'ID –ø–æ—Ç–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    const correctedFileName = decodeRussianFileName(req.file.originalname);
    console.log('File name encoding correction:', {
      original: req.file.originalname,
      corrected: correctedFileName
    });
    
    const filePath = req.file.path; // –§–∞–π–ª —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä—è middleware

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const stream = await prisma.radioStream.update({
      where: { id: streamId },
      data: { attachment: correctedFileName }
    });

    return res.status(200).json({
      success: true,
      message: '–†–æ–ª–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      fileName: correctedFileName,
      streamId,
      path: filePath
    });
  } catch (error) {
    console.error('Error uploading stream roll:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–∏–∫–∞' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∞
export const updateRadioStream = async (req: Request, res: Response): Promise<any> => {
  try {
    const { id } = req.params;
    const { name, branchTypeOfDist, frequencySongs, fadeInDuration, volumeLevel, startDate, endDate, isActive } = req.body;

    const stream = await prisma.radioStream.update({
      where: { id },
      data: {
        name,
        branchTypeOfDist,
        frequencySongs: frequencySongs ? parseInt(frequencySongs) : undefined,
        fadeInDuration: fadeInDuration ? parseInt(fadeInDuration) : undefined,
        volumeLevel: volumeLevel ? parseInt(volumeLevel) : undefined,
        startDate: startDate ? new Date(startDate) : undefined,
        endDate: endDate ? new Date(endDate) : undefined,
        isActive
      }
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
    await notifyStreamsUpdate(stream.branchTypeOfDist);
    
    return res.status(200).json({ success: true, data: stream });
  } catch (error) {
    console.error('Error updating radio stream:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∞' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∞
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø–æ —Ç–∏–ø—É —Ñ–∏–ª–∏–∞–ª–∞
export const getActiveStreamsByBranchType = async (req: Request, res: Response): Promise<any> => {
  try {
    const { branchType } = req.query;
    
    if (!branchType) {
      return res.status(400).json({ error: '–¢–∏–ø —Ñ–∏–ª–∏–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const currentDate = new Date();
    
    const streams = await prisma.radioStream.findMany({
      where: {
        branchTypeOfDist: branchType as string,
        isActive: true,
        startDate: {
          lte: currentDate
        },
        OR: [
          { endDate: null },
          { endDate: { gte: currentDate } }
        ]
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    return res.status(200).json({
      success: true,
      data: streams
    });
  } catch (error) {
    console.error('Error getting active streams by branch type:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤' });
  }
};

export const deleteRadioStream = async (req: Request, res: Response): Promise<any> => {
  try {
    const { id } = req.params;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const stream = await prisma.radioStream.findUnique({
      where: { id }
    });

    if (stream && stream.attachment) {
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ä–æ–ª–∏–∫–∞
      const filePath = path.join('./public/retail/stream', stream.attachment);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }
    }

    await prisma.radioStream.delete({
      where: { id }
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
    if (stream) {
      await notifyStreamsUpdate(stream.branchTypeOfDist);
    }

    return res.status(200).json({ success: true, message: '–†–∞–¥–∏–æ –ø–æ—Ç–æ–∫ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Error deleting radio stream:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∞' });
  }
};

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Ç–æ–∫–∞
export const downloadStreamFile = async (req: Request, res: Response): Promise<any> => {
  try {
    const { id } = req.params;
    
    console.log('Downloading stream file for ID:', id);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const stream = await prisma.radioStream.findUnique({
      where: { id }
    });
    
    if (!stream) {
      console.log('Stream not found:', id);
      return res.status(404).json({ error: '–ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!stream.attachment) {
      console.log('Stream has no attachment:', id);
      return res.status(404).json({ error: '–§–∞–π–ª –ø–æ—Ç–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = path.join('./public/retail/radio/stream', stream.attachment);
    
    console.log('Looking for file at path:', filePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      console.log('File does not exist at path:', filePath);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
      const streamDir = './public/retail/radio/stream';
      const files = fs.readdirSync(streamDir);
      console.log('Available files in stream directory:', files);
      
      // –ò—â–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—à–µ–º—É –ø–æ—Ç–æ–∫—É
      const matchingFile = files.find(file => {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å attachment –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const decodedFileName = decodeRussianFileName(file);
        console.log('Comparing:', decodedFileName, 'with', stream.attachment);
        return decodedFileName === stream.attachment;
      });
      
      if (matchingFile) {
        console.log('Found matching file:', matchingFile);
        const correctedFilePath = path.join(streamDir, matchingFile);
        console.log('Using corrected file path:', correctedFilePath);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
        res.download(correctedFilePath, stream.attachment, (err) => {
          if (err) {
            console.error('Error sending file:', err);
            if (!res.headersSent) {
              res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
            }
          }
        });
        return;
      }
      
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
    
    console.log('File found, sending download response');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    res.download(filePath, stream.attachment, (err) => {
      if (err) {
        console.error('Error sending file:', err);
        if (!res.headersSent) {
          res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
        }
      }
    });
    
  } catch (error) {
    console.error('Error downloading stream file:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ—Ç–æ–∫–∞' });
  }
};