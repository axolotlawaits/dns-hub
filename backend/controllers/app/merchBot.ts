import { Bot, Context, session, SessionFlavor, InlineKeyboard, InputFile, Keyboard } from 'grammy';
import { prisma } from '../../server.js';
import { API } from '../../server.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è Merch –±–æ—Ç–∞
interface MerchSessionData {
  userChoiceHistory?: string[];
  searchState?: boolean;
  feedbackState?: {
    step: 'email' | 'text' | 'photo';
    email?: string;
    text?: string;
    photos?: string[];
  };
}

type MerchContext = Context & SessionFlavor<MerchSessionData>;

// –ö—ç—à –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–Ω–æ–ø–æ–∫
interface CacheData {
  buttonsHierarchy: Record<string, Array<{id: string, name: string, text: string}>>;
  lastUpdate: Date;
}

class MerchBotService {
  private static instance: MerchBotService;
  private bot: Bot<MerchContext> | null = null;
  private isRunning = false;
  private readonly MAX_RETRIES = 3;
  private retryCount = 0;
  private cache: CacheData = {
    buttonsHierarchy: {},
    lastUpdate: new Date(0)
  };

  private constructor() {
    this.initializeBot();
  }

  public static getInstance(): MerchBotService {
    if (!MerchBotService.instance) {
      MerchBotService.instance = new MerchBotService();
    }
    return MerchBotService.instance;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  private initializeBot(): void {
    const token = process.env.MERCH_BOT_TOKEN;
    if (!token) {
      console.error('MERCH_BOT_TOKEN not found');
      return;
    }
    
    const botName = process.env.MERCH_BOT_NAME;
    if (!botName) {
      console.error('MERCH_BOT_NAME not found');
      return;
    }
    
    this.bot = new Bot<MerchContext>(token);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
    this.bot.use(
      session({
        initial: (): MerchSessionData => ({}),
      })
    );

    this.setupHandlers();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  private setupHandlers(): void {
    if (!this.bot) return;
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.command('start', async (ctx) => {
      const user = ctx.from;
      if (!user) return;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      await this.saveUserToDB(user.id, user.username, user.first_name, user.last_name);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateStats(user.id, 'start');

      await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!`);
      
      const keyboard = new InlineKeyboard()
        .text('‚óÄ –ù–∞—á–∞—Ç—å ‚ñ∂', 'start_bot');
      
      await ctx.reply("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚óÄ –ù–∞—á–∞—Ç—å ‚ñ∂' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.", {
        reply_markup: keyboard
      });
      
      ctx.session.userChoiceHistory = [];
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
    this.bot.callbackQuery('start_bot', async (ctx) => {
      await ctx.answerCallbackQuery();
      if (ctx.from) {
        await this.updateStats(ctx.from.id, 'button_click', 'start');
      }
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
    this.bot.callbackQuery('feedback', async (ctx) => {
      await ctx.answerCallbackQuery();
      if (ctx.from) {
        await this.updateStats(ctx.from.id, 'feedback');
      }
      await this.startFeedback(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
    this.bot.callbackQuery('search', async (ctx) => {
      await ctx.answerCallbackQuery();
      if (ctx.from) {
        await this.updateStats(ctx.from.id, 'button_click', 'search');
      }
      await this.startSearch(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    this.bot.callbackQuery('back', async (ctx) => {
      await ctx.answerCallbackQuery();
      if (ctx.from) {
        await this.updateStats(ctx.from.id, 'button_click', 'back');
      }
      await this.goBack(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–∞—è"
    this.bot.callbackQuery('main_menu', async (ctx) => {
      await ctx.answerCallbackQuery();
      if (ctx.from) {
        await this.updateStats(ctx.from.id, 'button_click', 'main_menu');
      }
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–∫–∞—Ä—Ç–æ—á–∫–∏
    this.bot.callbackQuery(/^item_/, async (ctx) => {
      await ctx.answerCallbackQuery();
      const itemId = ctx.callbackQuery.data.replace('item_', '');
      await this.handleItemClick(ctx, itemId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message:text', async (ctx) => {
      const messageText = ctx.message?.text;
      if (!messageText) return;

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (ctx.session.feedbackState) {
        await this.handleTextMessage(ctx);
        return;
      }
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
      if (ctx.session.searchState) {
        await this.handleSearchQuery(ctx, messageText);
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
      await this.handleButtonClick(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
    this.bot.on('message:photo', async (ctx) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (ctx.session.feedbackState && ctx.session.feedbackState.step === 'photo') {
        await this.handlePhotoMessage(ctx);
      }
      // –ò–Ω–∞—á–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ handleButtonClick)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    this.bot.on('message:photo', async (ctx) => {
      await this.handlePhotoMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err) => {
      console.error('MerchBot error:', err);
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  private async showMainMenu(ctx: MerchContext): Promise<void> {
    try {
      const buttonsHierarchy = await this.getButtonsHierarchy();
      const rootItems = buttonsHierarchy['0'] || [];

      // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      const keyboard = new Keyboard();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)
      keyboard.text('üîç –ü–æ–∏—Å–∫').text('üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å').row();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 6 –Ω–∞ —ç–∫—Ä–∞–Ω)
      const maxCategories = 6;
      const categoriesToShow = rootItems.slice(0, maxCategories);
      
      for (let i = 0; i < categoriesToShow.length; i += 2) {
        const first = categoriesToShow[i];
        const second = categoriesToShow[i + 1];
        
        if (second) {
          keyboard.text(first.name).text(second.name).row();
        } else {
          keyboard.text(first.name).row();
        }
      }
      
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ–ª—å—à–µ 6, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â–µ"
      if (rootItems.length > maxCategories) {
        keyboard.text('üìã –ï—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏').row();
      }
      
      keyboard.resized().persistent();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await ctx.reply('üìë –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
        reply_markup: keyboard
      });
      
      ctx.session.userChoiceHistory = [];
    } catch (error) {
      console.error('Error showing main menu:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
  private async handleCategoryClick(ctx: MerchContext, itemId: string): Promise<void> {
    if (ctx.from) {
      await this.updateStats(ctx.from.id, 'button_click', 'category');
    }
    await this.handleItemClick(ctx, itemId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
  private async handleButtonClick(ctx: MerchContext): Promise<void> {
    try {
      const messageText = ctx.message?.text;
      if (!messageText || !ctx.from) return;

      console.log(`üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: "${messageText}"`);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      if (messageText === 'üè† –ì–ª–∞–≤–Ω–∞—è') {
        await this.updateStats(ctx.from.id, 'button_click', 'main_menu');
        await this.showMainMenu(ctx);
        return;
      }

      if (messageText === '‚óÄÔ∏è –ù–∞–∑–∞–¥') {
        await this.updateStats(ctx.from.id, 'button_click', 'back');
        await this.goBack(ctx);
        return;
      }

      if (messageText === 'üìã –ï—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') {
        await this.updateStats(ctx.from.id, 'button_click', 'more_categories');
        await this.showMoreCategories(ctx);
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±–æ—Ä–∞
      if (!ctx.session.userChoiceHistory) {
        ctx.session.userChoiceHistory = [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–Ω–æ–ø–æ–∫
      const buttonsHierarchy = await this.getButtonsHierarchy();
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
      let foundButton = null;
      let foundParentId = null;

      for (const [parentId, children] of Object.entries(buttonsHierarchy)) {
        for (const child of children) {
          if (child.name === messageText) {
            foundButton = child;
            foundParentId = parentId;
            break;
          }
        }
        if (foundButton) break;
      }

      if (!foundButton) {
        console.log(`‚ùå –ö–Ω–æ–ø–∫–∞ "${messageText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏`);
        return;
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: ${foundButton.name} (ID: ${foundButton.id})`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateStats(ctx.from.id, 'button_click', foundButton.name);

      // –ï—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å –¥–µ—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      if (buttonsHierarchy[foundButton.id]) {
        ctx.session.userChoiceHistory.push(foundButton.id);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const photoUrls = await this.getPhotoUrls(foundButton.id);
      console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${photoUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);
      
      for (const photoUrl of photoUrls) {
        try {
          const fileName = photoUrl.split('/').pop();
          if (!fileName) continue;
          
          const filePath = path.join(__dirname, '..', '..', 'public', 'add', 'merch', fileName);
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${filePath}`);
          
          if (fs.existsSync(filePath)) {
            await ctx.replyWithPhoto(new InputFile(filePath));
            console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${fileName}`);
          } else {
            console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${photoUrl}:`, error);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      if (foundButton.text) {
        await ctx.reply(foundButton.text);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
      await this.updateMenu(ctx, buttonsHierarchy);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
  private async updateMenu(ctx: MerchContext, buttonsHierarchy: any): Promise<void> {
    try {
      const currentMenuId = ctx.session.userChoiceHistory?.[ctx.session.userChoiceHistory.length - 1] || '0';
      const keyboard = new Keyboard();

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é
      const currentMenuButtons = buttonsHierarchy[currentMenuId] || [];
      for (const button of currentMenuButtons) {
        keyboard.text(button.name);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      if (currentMenuId !== '0' && currentMenuButtons.length > 0) {
        keyboard.row().text('‚óÄÔ∏è –ù–∞–∑–∞–¥').text('üè† –ì–ª–∞–≤–Ω–∞—è');
      }

      await ctx.reply('‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é:', error);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private async showMoreCategories(ctx: MerchContext): Promise<void> {
    try {
      const buttonsHierarchy = await this.getButtonsHierarchy();
      const rootItems = buttonsHierarchy['0'] || [];

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const keyboard = new Keyboard();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—è —Å 7-–π (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 6)
      const moreCategories = rootItems.slice(6);
      
      for (let i = 0; i < moreCategories.length; i += 2) {
        const first = moreCategories[i];
        const second = moreCategories[i + 1];
        
        if (second) {
          keyboard.text(first.name).text(second.name).row();
        } else {
          keyboard.text(first.name).row();
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥').text('üè† –ì–ª–∞–≤–Ω–∞—è').row();
      
      keyboard.resized().persistent();

      await ctx.reply('üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
  private async handleItemClick(ctx: MerchContext, itemId: string): Promise<void> {
    try {
      const buttonsHierarchy = await this.getButtonsHierarchy();
      const item = await this.findItemById(itemId);
      
      if (!item) {
        await ctx.reply('‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (ctx.from) {
        await this.updateStats(ctx.from.id, 'button_click', item.name);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const photoUrls = await this.getPhotoUrls(itemId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.log(`üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${photoUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${itemId}:`, photoUrls);
      for (const url of photoUrls) {
        try {
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${url}`);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
          const fileName = url.split('/').pop();
          if (!fileName) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL: ${url}`);
            continue;
          }
          
          // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          const filePath = path.join(__dirname, '..', '..', 'public', 'add', 'merch', fileName);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
          if (!fs.existsSync(filePath)) {
            console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            continue;
          }
          
          // –°–æ–∑–¥–∞–µ–º InputFile –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
          const photo = new InputFile(filePath);
          await ctx.replyWithPhoto(photo);
          console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${fileName}`);
          await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ–æ—Ç–æ
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${url}:`, error);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      if (item.description) {
        const formattedText = this.formatDescription(item.description);
        await ctx.reply(formattedText, { parse_mode: 'Markdown' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const children = buttonsHierarchy[itemId] || [];
      
      if (children.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (!ctx.session.userChoiceHistory) {
          ctx.session.userChoiceHistory = [];
        }
        ctx.session.userChoiceHistory.push(itemId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        await this.showSubMenu(ctx, children);
      } else {
        // –≠—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await this.showNavigationMenu(ctx);
      }
    } catch (error) {
      console.error('Error handling item click:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é
  private async showSubMenu(ctx: MerchContext, children: Array<{id: string, name: string, text: string}>): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new Keyboard()
      .text('üîç –ü–æ–∏—Å–∫')
      .text('üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
      .row()
      .text('üè† –ì–ª–∞–≤–Ω–∞—è')
      .text('‚óÄÔ∏è –ù–∞–∑–∞–¥')
      .resized()
      .persistent();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply('‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
      reply_markup: keyboard
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const inlineKeyboard = new InlineKeyboard();
    for (const child of children) {
      inlineKeyboard.text(child.name, `item_${child.id}`).row();
    }
    
    await ctx.reply('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
      reply_markup: inlineKeyboard
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  private async showNavigationMenu(ctx: MerchContext): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new Keyboard()
      .text('üîç –ü–æ–∏—Å–∫')
      .text('üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
      .row()
      .text('üè† –ì–ª–∞–≤–Ω–∞—è')
      .text('‚óÄÔ∏è –ù–∞–∑–∞–¥')
      .resized()
      .persistent();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: keyboard
    });
  }

  // –ù–∞–∑–∞–¥
  private async goBack(ctx: MerchContext): Promise<void> {
    if (!ctx.session.userChoiceHistory || ctx.session.userChoiceHistory.length === 0) {
      await this.showMainMenu(ctx);
      return;
    }

    ctx.session.userChoiceHistory.pop();
    const currentMenuId = ctx.session.userChoiceHistory[ctx.session.userChoiceHistory.length - 1] || '0';
    
    const buttonsHierarchy = await this.getButtonsHierarchy();
    const children = buttonsHierarchy[currentMenuId] || [];
    
    if (children.length > 0) {
      await this.showSubMenu(ctx, children);
    } else {
      await this.showMainMenu(ctx);
    }
  }

  // –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
  private async startSearch(ctx: MerchContext): Promise<void> {
    ctx.session.searchState = true;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new Keyboard()
      .text('üîç –ü–æ–∏—Å–∫')
      .text('üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
      .row()
      .text('üè† –ì–ª–∞–≤–Ω–∞—è')
      .text('‚óÄÔ∏è –ù–∞–∑–∞–¥')
      .resized()
      .persistent();
    
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:', {
      reply_markup: keyboard
    });
  }

  // –ù–∞—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
  private async startFeedback(ctx: MerchContext): Promise<void> {
    ctx.session.feedbackState = {
      step: 'email',
      email: undefined,
      text: undefined,
      photos: []
    };
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new Keyboard()
      .text('üîç –ü–æ–∏—Å–∫')
      .text('üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
      .row()
      .text('üè† –ì–ª–∞–≤–Ω–∞—è')
      .text('‚óÄÔ∏è –ù–∞–∑–∞–¥')
      .resized()
      .persistent();
    
    await ctx.reply('üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:', {
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  private async handleTextMessage(ctx: MerchContext): Promise<void> {
    if (!ctx.message || !ctx.message.text) return;
    const text = ctx.message.text;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    if (ctx.session.searchState) {
      await this.handleSearchQuery(ctx, text);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (ctx.session.feedbackState) {
      await this.handleFeedbackText(ctx, text);
      return;
    }
    
    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  private async handleSearchQuery(ctx: MerchContext, query: string): Promise<void> {
    try {
      if (ctx.from) {
        await this.updateStats(ctx.from.id, 'search', query.toLowerCase());
      }
      
      const results = await this.searchItems(query);
      
      if (results.length === 0) {
        await ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.');
        return;
      }
      
      const keyboard = new InlineKeyboard();
      
      for (const result of results) {
        keyboard.text(result.name, `item_${result.id}`).row();
      }
      
      keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back').text('üè† –ì–ª–∞–≤–Ω–∞—è', 'main_menu');
      
      await ctx.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', {
        reply_markup: keyboard
      });
      
      ctx.session.searchState = false;
    } catch (error) {
      console.error('Error handling search:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  private async handleFeedbackText(ctx: MerchContext, text: string): Promise<void> {
    const feedback = ctx.session.feedbackState;
    if (!feedback) return;
    
    switch (feedback.step) {
      case 'email':
        if (this.isValidEmail(text)) {
          feedback.email = text;
          feedback.step = 'text';
          await ctx.reply('üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:');
        } else {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:');
        }
        break;
        
      case 'text':
        if (text.length >= 10) {
          feedback.text = text;
          feedback.step = 'photo';
          await ctx.reply('üì∑ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–≥–æ—Ç–æ–≤–æ":');
        } else {
          await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):');
        }
        break;
        
      case 'photo':
        if (text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
          await this.finishFeedback(ctx);
        } else {
          await ctx.reply('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ":');
        }
        break;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  private async handlePhotoMessage(ctx: MerchContext): Promise<void> {
    const feedback = ctx.session.feedbackState;
    if (!feedback || feedback.step !== 'photo') {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      return;
    }
    
    if (!ctx.message || !ctx.message.photo) {
      await ctx.reply('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
      return;
    }
    
    try {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const file = await ctx.api.getFile(photo.file_id);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
      if (!feedback.photos) {
        feedback.photos = [];
      }
      if (file.file_path) {
        feedback.photos.push(file.file_path);
      }
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ":');
    } catch (error) {
      console.error('Error handling photo:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
    }
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
  private async finishFeedback(ctx: MerchContext): Promise<void> {
    const feedback = ctx.session.feedbackState;
    if (!feedback) return;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      const adminMessage = `
üì© –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from?.first_name || 'Unknown'} ${ctx.from?.last_name || ''}
üÜî ID: ${ctx.from?.id || 'Unknown'}
üìß Email: ${feedback.email}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${feedback.text}
üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${feedback.photos?.length || 0}
‚è∞ –í—Ä–µ–º—è: ${new Date().toISOString()}
      `;
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      console.log('Feedback received:', adminMessage);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      ctx.session.feedbackState = undefined;
      
      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë.');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await this.showMainMenu(ctx);
    } catch (error) {
      console.error('Error finishing feedback:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  private async getButtonsHierarchy(): Promise<Record<string, Array<{id: string, name: string, text: string}>>> {
    const now = new Date();
    const cacheAge = now.getTime() - this.cache.lastUpdate.getTime();
    
    // –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å
    if (cacheAge < 3600000 && Object.keys(this.cache.buttonsHierarchy).length > 0) {
      return this.cache.buttonsHierarchy;
    }
    
    try {
      const categories = await prisma.merch.findMany({
        where: { isActive: true },
        orderBy: [
          { sortOrder: 'asc' },
          { name: 'asc' }
        ],
        include: {
          attachments: {
            where: { type: 'image' },
            orderBy: { sortOrder: 'asc' }
          }
        }
      });
      
      const hierarchy: Record<string, Array<{id: string, name: string, text: string}>> = {};
      
      for (const category of categories) {
        const parentId = category.parentId || '0';
        if (!hierarchy[parentId]) {
          hierarchy[parentId] = [];
        }
        
        hierarchy[parentId].push({
          id: category.id,
          name: category.name,
          text: category.description || ''
        });
      }
      
      this.cache.buttonsHierarchy = hierarchy;
      this.cache.lastUpdate = now;
      
      return hierarchy;
    } catch (error) {
      console.error('Error getting buttons hierarchy:', error);
      return this.cache.buttonsHierarchy;
    }
  }

  // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  private async searchItems(query: string): Promise<Array<{id: string, name: string, text: string}>> {
    try {
      const items = await prisma.merch.findMany({
        where: {
          isActive: true,
          name: {
            contains: query,
            mode: 'insensitive'
          }
        },
        orderBy: [
          { sortOrder: 'asc' },
          { name: 'asc' }
        ]
      });
      
      return items.map(item => ({
        id: item.id,
        name: item.name,
        text: item.description || ''
      }));
    } catch (error) {
      console.error('Error searching items:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  private async getPhotoUrls(itemId: string): Promise<string[]> {
    try {
      console.log(`üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${itemId}`);
      const item = await prisma.merch.findUnique({
        where: { id: itemId },
        include: {
          attachments: {
            where: { type: 'image' },
            orderBy: { sortOrder: 'asc' }
          }
        }
      });
      
      if (!item) {
        console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç ${itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        return [];
      }
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: ${item.name}, attachments: ${item.attachments.length}`);
      
      const urls: string[] = [];
      const addedFiles = new Set<string>(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ attachments
      for (const attachment of item.attachments) {
        if (!addedFiles.has(attachment.source)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
          const attachmentUrl = this.getImageUrl(attachment.source);
          urls.push(attachmentUrl);
          addedFiles.add(attachment.source);
          console.log(`üìé –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${attachmentUrl}`);
        } else {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${attachment.source}`);
        }
      }
      
      console.log(`üì∏ –ò—Ç–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${urls.length}`, urls);
      return urls;
    } catch (error) {
      console.error('Error getting photo URLs:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
  private async findItemById(itemId: string): Promise<{id: string, name: string, description: string} | null> {
    try {
      const item = await prisma.merch.findUnique({
        where: { id: itemId }
      });
      
      if (!item) return null;
      
      return {
        id: item.id,
        name: item.name,
        description: item.description || ''
      };
    } catch (error) {
      console.error('Error finding item:', error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –≤ –ë–î
  private async saveUserToDB(userId: number, username?: string, firstName?: string, lastName?: string): Promise<void> {
    try {
      await prisma.merchTgUser.upsert({
        where: { userId: userId },
        update: {
          username: username,
          firstName: firstName,
          lastName: lastName,
          updatedAt: new Date()
        },
        create: {
          userId: userId,
          username: username,
          firstName: firstName,
          lastName: lastName
        }
      });
    } catch (error) {
      console.error('Error saving Telegram user to DB:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  private async updateStats(userId: number, actionType: string, details?: string): Promise<void> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const telegramUser = await prisma.merchTgUser.findUnique({
        where: { userId: userId }
      });

      if (telegramUser) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await prisma.merchTgUserStats.create({
          data: {
            userId: telegramUser.id,
            action: actionType,
            details: details
          }
        });
      }
      
      console.log(`Stats: User ${userId} - ${actionType}${details ? ` - ${details}` : ''}`);
    } catch (error) {
      console.error('Error updating stats:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private isValidEmail(email: string): boolean {
    const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return pattern.test(email);
  }

  private formatDescription(description: string): string {
    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown
    return description
      .replace(/\*\*(.*?)\*\*/g, '*$1*')
      .replace(/<b>(.*?)<\/b>/g, '*$1*')
      .replace(/<br\s*\/?>/g, '\n')
      .replace(/<[^>]+>/g, '');
  }

  private getImageUrl(imagePath: string): string {
    if (imagePath.startsWith('http')) {
      return imagePath;
    }
    return `${API}/public/add/merch/${imagePath}`;
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  public async launch(): Promise<boolean> {
    if (this.isRunning) {
      return false;
    }
    
    if (!this.bot) {
      console.error('MerchBot not initialized');
      return false;
    }

    try {
      await this.bot.start({
        drop_pending_updates: true,
        allowed_updates: ['message', 'callback_query'],
      });

      this.isRunning = true;
      this.retryCount = 0;
      console.log('MerchBot started successfully');
      return true;
    } catch (error) {
      console.error('Failed to start MerchBot:', error);

      if (this.retryCount < this.MAX_RETRIES) {
        this.retryCount++;
        const delay = Math.min(2000 * this.retryCount, 10000);
        await new Promise((resolve) => setTimeout(resolve, delay));
        return this.launch();
      }

      return false;
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  public async stop(): Promise<void> {
    if (!this.isRunning || !this.bot) return;

    try {
      await this.bot.stop();
      this.isRunning = false;
      console.log('MerchBot stopped');
    } catch (error) {
      console.error('Error stopping MerchBot:', error);
    }
  }

  // –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
  public get status() {
    return {
      isRunning: this.isRunning,
      retryCount: this.retryCount,
      botInitialized: !!this.bot,
      hasToken: !!process.env.MERCH_BOT_TOKEN,
      hasBotName: !!process.env.MERCH_BOT_NAME,
      botName: process.env.MERCH_BOT_NAME || 'Not set',
      cacheSize: Object.keys(this.cache.buttonsHierarchy).length,
      lastCacheUpdate: this.cache.lastUpdate
    };
  }

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
  public async restart(): Promise<boolean> {
    await this.stop();
    this.retryCount = 0;
    this.initializeBot();
    return this.launch();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const merchBotService = MerchBotService.getInstance();
