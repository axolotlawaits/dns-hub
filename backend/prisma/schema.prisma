datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* handbook models */

model UserData {
  uuid              String          @id @default(uuid())
  birthday          DateTime
  fio               String
  code              String
  branch            Branch          @relation(fields: [branch_uuid], references: [uuid])
  branch_uuid       String
  position          String
  email             String          @unique
  status            String
  start_date        DateTime
  end_date          DateTime
  last_update       DateTime       @updatedAt
}

model Branch {
  uuid              String          @id @default(uuid())
  division          String          
  code              String
  rrs               String
  name              String
  status            Int
  city              String
  address           String
  last_update       DateTime
  latitude          Float
  longitude         Float
  totalArea         Int
  tradingArea       Int
  warehouseArea     Int
  type              String
  userData          UserData[]
  images            BranchImage[]
}

model Type {
  id                String        @id @default(uuid())
  model_uuid        String
  chapter           String
  name              String
  Tool              Tool          @relation(fields: [model_uuid], references: [id])
}

model Tool {
  id                String        @id @default(uuid())
  parent_id         String?
  name              String
  icon              String
  link              String
  description       String?
  order             Int
  types             Type[]
}

model BranchImage {
  id              String          @id @default(uuid())
  link            String
  branch          Branch          @relation(fields: [branch_uuid], references: [uuid])
  branch_uuid     String
}

/* app models */

model User {
    id               String         @id @default(uuid())
    name             String
    email            String         @unique
    position         String
    branch           String
    image            String?
    login            String         @unique
    updatedAt        DateTime       @updatedAt
    correspondences  Correspondence[]
    attachments      CorrespondenceAttachment[]
    news             News[]
    meterReadings    MeterReading[]
}

model News {
  id                String          @id @default(uuid())
  name              String
  description       String
  user              User            @relation(fields: [userId], references: [id])
  userId            String          
  createdAt         DateTime        @default(now())
}

/* Instruments models */
/* AXO */
model MeterReading {
  id               String         @id @default(uuid())
  createdAt        DateTime      @default(now())
  date             DateTime
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  counter          Float
}

model Correspondence {
    id               String                     @id @default(uuid())
    createdAt        DateTime                   @default(now())
    ReceiptDate      DateTime
    userAdd          String
    from             String
    to               String
    content          String
    typeMail         String
    numberMail       String
    attachments      CorrespondenceAttachment[]
    user             User                       @relation(fields: [userAdd], references: [id])
}

model CorrespondenceAttachment {
    id               String                     @id @default(uuid())
    createdAt        DateTime                   @default(now())
    record_id        String                     
    userAdd          String
    source           String
    correspondence   Correspondence             @relation(fields: [record_id], references: [id])
    user             User                       @relation(fields: [userAdd], references: [id])
}

/* supply */

model Route {
  id              String          @id @default(uuid())
  name            String          @unique
  rrs             String
  contractor      String
  filials         Filial[]
  days            RouteDay[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model RouteDay {
  id              String          @id @default(uuid())
  day             DateTime        @unique
  route           Route           @relation(fields: [routeId], references: [id])
  routeId         String        
  createdAt       DateTime        @default(now())
  filials         Filial[]
}

model Filial {
  id              String          @id @default(uuid())
  name            String
  place           Int?             
  accepted        Boolean         @default(false)
  feedback        String?
  loaders         Loader[]
  route           Route           @relation(fields: [routeId], references: [id])
  routeId         String  
  routeDay        RouteDay?       @relation(fields: [routeDayId], references: [id])
  routeDayId      String?
  updatedAt       DateTime        @updatedAt        
}

model Loader {
  id              String          @id @default(uuid())
  startTime       DateTime
  endTime         DateTime
  filial          Filial          @relation(fields: [filialId], references: [id])
  filialId        String
}