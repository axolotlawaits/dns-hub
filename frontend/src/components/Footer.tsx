import { AppShell, Loader, Group, Popover, Stack, Text, Divider, Box } from "@mantine/core";
import { IconAppWindow, IconBasket, IconBrandRumble, IconBrandUnity, IconBriefcase, IconNews } from "@tabler/icons-react";
import { useWeather, WeatherCondition } from "../app/Weather";
import { useState, useEffect, useCallback, useContext, useMemo } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import dayjs from "dayjs";
import 'dayjs/locale/ru';
import "./styles/Footer.css";
import { ThemeContext } from "../contexts/ThemeContext";
import { useUserContext } from "../hooks/useUserContext";
import { API } from "../config/constants";

interface ForecastDay {
  date: string;
  day: {
    avgtemp_c: number;
    condition: {
      text: string;
    };
  };
}

const WEATHER_API_KEY = '7a61de9f85134f88a9273945250904';
const FORECAST_DAYS = 3;

const navLinks = [
  {
    href: "https://dns-shop.ru",
    icon: IconBasket,
    name: "DNS-Shop",
    description: "–ú–∞–≥–∞–∑–∏–Ω"
  },
  {
    href: "https://docs.dns-shop.ru/",
    icon: IconBriefcase,
    name: "Docs",
    description: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
  },
  {
    href: "https://ecosystem.dns-shop.ru/stream",
    icon: IconNews,
    name: "EcoSystem",
    description: "–ù–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"
  },
  {
    href: "https://media2.dns-shop.ru/",
    icon: IconBrandRumble,
    name: "Media2",
    description: "–ú–µ–¥–∏–∞ –ø–æ—Ä—Ç–∞–ª"
  },
  {
    href: "http://sale.partner.ru/login",
    icon: IconAppWindow,
    name: "Web - –ë–∞–∑–∞",
    description: "–ü–æ—Ä—Ç–∞–ª –ø—Ä–æ–¥–∞–∂"
  },
  {
    href: window.location.host.includes('localhost') ? `https://dns-zs.partner.ru/uweb` : `https://${window.location.host}/uweb`,
    icon: IconBrandUnity,
    name: "Uweb",
    description: "–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã"
  }
];
console.log(window.location.host.includes('localhost'))
const getWeatherIcon = (condition: WeatherCondition) => {
  const icons = {
    clear: "‚òÄÔ∏è",
    cloudy: "‚òÅÔ∏è",
    rain: "üåßÔ∏è",
    snow: "‚ùÑÔ∏è",
    default: "üå§Ô∏è"
  };
  
  return icons[condition] || icons.default;
};

const getDayWeatherIcon = (conditionText: string) => {
  if (conditionText.toLowerCase().includes("–¥–æ–∂–¥—å")) return "üåßÔ∏è";
  if (conditionText.toLowerCase().includes("—Å–Ω–µ–≥")) return "‚ùÑÔ∏è";
  if (conditionText.toLowerCase().includes("–æ–±–ª–∞—á")) return "‚òÅÔ∏è";
  return "‚òÄÔ∏è";
};

function Footer() {
  const themeContext = useContext(ThemeContext);
  const { user } = useUserContext();
  const isDark = themeContext?.isDark ?? false;

  // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
  const { location, weatherCondition, isWeatherLoading } = useWeather();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–≥–æ–¥—ã
  const [forecast, setForecast] = useState<ForecastDay[]>([]);
  const [weatherOpened, setWeatherOpened] = useState(false);
  const [currentTemp, setCurrentTemp] = useState<number | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const [currentTime, setCurrentTime] = useState("");
  const [currentDate, setCurrentDate] = useState("");
  const [calendarOpened, setCalendarOpened] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());
  const [isScrolled, setIsScrolled] = useState(false);
  const [isFooterVisible, setIsFooterVisible] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const [autoHideEnabled, setAutoHideEnabled] = useState(false);
  const [hideTimer, setHideTimer] = useState<NodeJS.Timeout | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
  const fetchWeatherData = useCallback(async () => {
    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
      const [currentResponse, forecastResponse] = await Promise.all([
        fetch(`https://api.weatherapi.com/v1/current.json?key=${WEATHER_API_KEY}&q=auto:ip`),
        fetch(`https://api.weatherapi.com/v1/forecast.json?key=${WEATHER_API_KEY}&q=auto:ip&days=5`)
      ]);

      if (!currentResponse.ok || !forecastResponse.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ");
      }

      const [currentData, forecastData] = await Promise.all([
        currentResponse.json(),
        forecastResponse.json()
      ]);

      setCurrentTemp(Math.round(currentData.current.temp_c));
      setForecast(forecastData.forecast.forecastday);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:", error);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchWeatherData();
  }, [fetchWeatherData]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏—è —Ñ—É—Ç–µ—Ä–∞
  useEffect(() => {
    const loadFooterSetting = async () => {
      try {
        const response = await fetch(`${API}/user/settings/${user?.id}/auto_hide_footer`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        });
        if (response.ok) {
          const data = await response.json();
          setAutoHideEnabled(data.value === 'true');
        } else if (response.status === 404) {
          // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
          setAutoHideEnabled(false);
        }
      } catch (error) {
        console.error('Error loading footer setting:', error);
      }
    };

    if (user?.id) {
      loadFooterSetting();
    }
  }, [user?.id]);

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏—è —Ñ—É—Ç–µ—Ä–∞
  useEffect(() => {
    const handleFooterSettingChange = (event: CustomEvent) => {
      setAutoHideEnabled(event.detail);
    };

    window.addEventListener('footer-setting-changed', handleFooterSettingChange as EventListener);
    
    return () => {
      window.removeEventListener('footer-setting-changed', handleFooterSettingChange as EventListener);
    };
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (hideTimer) {
        clearTimeout(hideTimer);
      }
    };
  }, [hideTimer]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ—É—Ç–µ—Ä–∞
  useEffect(() => {
    if (!autoHideEnabled) {
      setIsFooterVisible(true);
    } else {
      setIsFooterVisible(false);
    }
  }, [autoHideEnabled]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    const updateTime = () => {
      const now = new Date();
      setCurrentTime(now.toLocaleTimeString("ru-RU", { 
        hour: "2-digit", 
        minute: "2-digit" 
      }));
      setCurrentDate(dayjs(now).format("DD.MM.YYYY"));
    };
    
    updateTime();
    const timer = setInterval(updateTime, 1000);
    return () => clearInterval(timer);
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞)
  useEffect(() => {
    const handleScroll = () => {
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (0-100%)
      const maxScroll = documentHeight - windowHeight;
      const progress = maxScroll > 0 ? Math.min((scrollY / maxScroll) * 100, 100) : 0;
      setScrollProgress(progress);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–Ω–∏–∑ –∏–ª–∏ –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ–ª—å—à–µ —ç–∫—Ä–∞–Ω–∞
      const shouldShowScrolled = scrollY > 50 || documentHeight > windowHeight + 100;
      setIsScrolled(shouldShowScrolled);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–∞ –ø–æ–≥–æ–¥—ã
  const handleWeatherClick = useCallback(() => {
    const newState = !weatherOpened;
    setWeatherOpened(newState);
    if (newState && forecast.length === 0) {
      fetchWeatherData();
    }
  }, [weatherOpened, forecast.length, fetchWeatherData]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
  const forecastDisplay = useMemo(() => (
    forecast.slice(0, FORECAST_DAYS).map((day) => (
      <Group key={day.date} justify="space-between">
        <Text size="sm">{dayjs(day.date).format('dd DD.MM')}</Text>
        <Text size="sm" fw={500}>{Math.round(day.day.avgtemp_c)}¬∞C</Text>
        <Text size="sm">{getDayWeatherIcon(day.day.condition.text)}</Text>
      </Group>
    ))
  ), [forecast]);


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏ –¥–ª—è —Ñ—É—Ç–µ—Ä–∞
  const handleMouseEnter = () => {
    if (autoHideEnabled) {
      setIsFooterVisible(true);
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
      if (hideTimer) {
        clearTimeout(hideTimer);
        setHideTimer(null);
      }
    }
  };

  const handleMouseLeave = () => {
    if (autoHideEnabled) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
      const timer = setTimeout(() => {
        setIsFooterVisible(false);
        setHideTimer(null);
      }, 5000);
      setHideTimer(timer);
    }
  };

  return (
    <AppShell.Footer 
      id="footer-wrapper" 
      data-footer
      className={`auto-hide-footer ${isScrolled ? 'scrolled' : ''} ${isFooterVisible ? 'visible' : 'hidden'} ${autoHideEnabled ? 'auto-hide-enabled' : 'auto-hide-disabled'}`}
      style={{
        '--scroll-progress': `${scrollProgress}%`
      } as React.CSSProperties}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
      <div className="scroll-progress-bar" style={{ width: `${scrollProgress}%` }} />
      
      <div id="footer">
        <div id="footer-nav">
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ */}
          {navLinks.map((link) => {
            const Icon = link.icon;
            return (
              <a 
                key={link.href}
                href={link.href} 
                className="footer-nav-option" 
                target="_blank" 
                rel="noopener noreferrer"
              >
                <Icon size={35} />
                <div className="footer-nav-text">
                  <span className="footer-nav-name">{link.name}</span>
                  <span className="footer-nav-description">{link.description}</span>
                </div>
              </a>
            );
          })}
          {/* –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º */}
          <div className="footer-right-section">
            <Divider orientation="vertical" className="footer-divider" />
            {/* –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø–æ–≥–æ–¥–æ–π –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º */}
            <Box w={10} />
            {/* –ü–æ–≥–æ–¥–∞ */}
            <Popover 
              opened={weatherOpened} 
              onChange={setWeatherOpened} 
              position="top-end"
              classNames={{ dropdown: isDark ? 'dark-theme-dropdown' : '' }}
            >
              <Popover.Target>
                <div 
                  className="footer-weather-option" 
                  onClick={handleWeatherClick}
                >
                  {isWeatherLoading ? (
                    <Loader size="sm" />
                  ) : (
                    <>
                      <span className="weather-icon">{getWeatherIcon(weatherCondition)}</span>
                      <div className="footer-weather-text">
                        <span className="weather-temp">{currentTemp ?? '--'}¬∞C</span>
                        <span className="weather-location">{location}</span>
                      </div>
                    </>
                  )}
                </div>
              </Popover.Target>
              <Popover.Dropdown>
                <Stack gap="sm">
                  <Text size="sm" fw={500}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {FORECAST_DAYS} –¥–Ω—è</Text>
                  {forecastDisplay}
                </Stack>
              </Popover.Dropdown>
            </Popover>  

            {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */}
            <Popover 
              opened={calendarOpened} 
              onChange={setCalendarOpened} 
              position="top-end"
              classNames={{ dropdown: isDark ? 'dark-theme-dropdown' : '' }}
            >
              <Popover.Target>
                <div 
                  className="footer-time-option" 
                  onClick={() => setCalendarOpened(!calendarOpened)}
                >
                  <div className="footer-time-text">
                    <span className="footer-time">{currentTime}</span>
                    <span className="footer-date">{currentDate}</span>
                  </div>
                </div>
              </Popover.Target>
              <Popover.Dropdown p={0} bg="transparent">
                <DatePicker
                  selected={selectedDate}
                  onChange={(date) => {
                    setSelectedDate(date);
                    setCalendarOpened(false);
                  }}
                  inline
                  locale="ru"
                  calendarStartDay={1}
                  showMonthDropdown
                  showYearDropdown
                  dropdownMode="select"
                  dateFormat="dd.MM.yyyy"
                  className={isDark ? "dark-theme-datepicker" : ""}
                  popperClassName="no-border-popper"
                  calendarClassName={isDark ? "dark-calendar" : ""}
                />
              </Popover.Dropdown>
            </Popover>
          </div>
        </div>
      </div>
    </AppShell.Footer>
  );
}

export default Footer;