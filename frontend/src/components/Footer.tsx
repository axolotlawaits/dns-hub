import { AppShell, Loader, Group, Popover, Stack, Text, Divider, Box } from "@mantine/core";
import { IconBasket, IconBriefcase, IconCube, IconNews } from "@tabler/icons-react";
import { useWeather, WeatherCondition } from "../app/Weather";
import { useState, useEffect, useCallback, useContext } from "react";
import DatePicker from "react-datepicker";
import { registerLocale } from "react-datepicker";
import { ru } from "date-fns/locale/ru";
import "react-datepicker/dist/react-datepicker.css";
import dayjs from "dayjs";
import 'dayjs/locale/ru';
import "./styles/Footer.css";
import { ThemeContext } from "../contexts/ThemeContext";

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
registerLocale('ru', ru);
dayjs.locale('ru');

function Footer() {
  const themeContext = useContext(ThemeContext);
  const isDark = themeContext?.isDark ?? false;

  // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
  const { location, weatherCondition, isWeatherLoading } = useWeather();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–≥–æ–¥—ã
  const [forecast, setForecast] = useState<any[]>([]);
  const [weatherOpened, setWeatherOpened] = useState(false);
  const [currentTemp, setCurrentTemp] = useState<number | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const [currentTime, setCurrentTime] = useState<string>("");
  const [currentDate, setCurrentDate] = useState<string>("");
  const [calendarOpened, setCalendarOpened] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const fetchCurrentWeather = async () => {
      try {
        const response = await fetch(
          `https://api.weatherapi.com/v1/current.json?key=7a61de9f85134f88a9273945250904&q=auto:ip`
        );
        
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã");
        
        const data = await response.json();
        setCurrentTemp(Math.round(data.current.temp_c));
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã:", error);
      }
    };
    
    fetchCurrentWeather();
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    const updateTime = () => {
      const now = new Date();
      setCurrentTime(now.toLocaleTimeString("ru-RU", { 
        hour: "2-digit", 
        minute: "2-digit" 
      }));
      setCurrentDate(dayjs(now).format("DD.MM.YYYY"));
    };
    
    updateTime();
    const timer = setInterval(updateTime, 1000);
    return () => clearInterval(timer);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
  const fetchForecast = useCallback(async () => {
    try {
      const response = await fetch(
        `https://api.weatherapi.com/v1/forecast.json?key=7a61de9f85134f88a9273945250904&q=auto:ip&days=5`
      );
      
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞");
      
      const data = await response.json();
      setForecast(data.forecast.forecastday);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:", error);
    }
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
  const getWeatherIcon = (condition: WeatherCondition) => {
    switch (condition) {
      case "clear": return "‚òÄÔ∏è";
      case "cloudy": return "‚òÅÔ∏è";
      case "rain": return "üåßÔ∏è";
      case "snow": return "‚ùÑÔ∏è";
      default: return "üå§Ô∏è";
    }
  };

  return (
    <AppShell.Footer id="footer-wrapper">
      <div id="footer">
        <div id="footer-nav">
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ */}
          <a href="https://dns-shop.ru" className="footer-nav-option" target="_blank" rel="noopener noreferrer">
            <IconBasket size={35} />
            <div className="footer-nav-text">
              <span className="footer-nav-name">DNS-Shop</span>
              <span className="footer-nav-description">–ú–∞–≥–∞–∑–∏–Ω</span>
            </div>
          </a>
          
          <a href="https://dns-zs.partner.ru/uweb" className="footer-nav-option" target="_blank" rel="noopener noreferrer">
            <IconCube size={35} />
            <div className="footer-nav-text">
              <span className="footer-nav-name">Uweb</span>
              <span className="footer-nav-description">3D –ø–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã</span>
            </div>
          </a>
          
          <a href="https://docs.dns-shop.ru/" className="footer-nav-option" target="_blank" rel="noopener noreferrer">
            <IconBriefcase size={35} />
            <div className="footer-nav-text">
              <span className="footer-nav-name">Docs</span>
              <span className="footer-nav-description">–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</span>
            </div>
          </a>
          
          <a href="https://ecosystem.dns-shop.ru/stream" className="footer-nav-option" target="_blank" rel="noopener noreferrer">
            <IconNews size={35} />
            <div className="footer-nav-text">
              <span className="footer-nav-name">EcoSystem</span>
              <span className="footer-nav-description">–ù–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏</span>
            </div>
          </a>

          {/* –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º */}
          <div className="footer-right-section">
            <Divider orientation="vertical" className="footer-divider" />
            
            {/* –ü–æ–≥–æ–¥–∞ */}
            <Popover 
              opened={weatherOpened} 
              onChange={setWeatherOpened} 
              position="top-end"
              classNames={{ dropdown: isDark ? 'dark-theme-dropdown' : '' }}
            >
              <Popover.Target>
                <div 
                  className="footer-weather-option" 
                  onClick={() => {
                    if (!weatherOpened && forecast.length === 0) fetchForecast();
                    setWeatherOpened(!weatherOpened);
                  }}
                >
                  {isWeatherLoading ? (
                    <Loader size="sm" />
                  ) : (
                    <>
                      <span className="weather-icon">{getWeatherIcon(weatherCondition)}</span>
                      <div className="footer-weather-text">
                        <span className="weather-temp">{currentTemp ?? '--'}¬∞C</span>
                        <span className="weather-location">{location}</span>
                      </div>
                    </>
                  )}
                </div>
              </Popover.Target>
              <Popover.Dropdown>
                <Stack gap="sm">
                  <Text size="sm" fw={500}>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è</Text>
                  {forecast.slice(0, 3).map((day) => (
                    <Group key={day.date} justify="space-between">
                      <Text size="sm">{dayjs(day.date).format('dd DD.MM')}</Text>
                      <Text size="sm" fw={500}>{Math.round(day.day.avgtemp_c)}¬∞C</Text>
                      <Text size="sm">
                        {day.day.condition.text.toLowerCase().includes("–¥–æ–∂–¥—å") ? "üåßÔ∏è" :
                        day.day.condition.text.toLowerCase().includes("—Å–Ω–µ–≥") ? "‚ùÑÔ∏è" :
                        day.day.condition.text.toLowerCase().includes("–æ–±–ª–∞—á") ? "‚òÅÔ∏è" : "‚òÄÔ∏è"}
                      </Text>
                    </Group>
                  ))}
                </Stack>
              </Popover.Dropdown>
            </Popover>
            
            {/* –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø–æ–≥–æ–¥–æ–π –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º */}
            <Box w={10} />
            
            {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */}
            <Popover 
              opened={calendarOpened} 
              onChange={setCalendarOpened} 
              position="top-end"
              classNames={{ dropdown: isDark ? 'dark-theme-dropdown' : '' }}
            >
              <Popover.Target>
                <div className="footer-time-option" onClick={() => setCalendarOpened(!calendarOpened)}>
                  <div className="footer-time-text">
                    <span className="footer-time">{currentTime}</span>
                    <span className="footer-date">{currentDate}</span>
                  </div>
                </div>
              </Popover.Target>
                  <Popover.Dropdown p={0} bg="transparent">
                    <DatePicker
                      selected={selectedDate}
                      onChange={(date) => {
                        setSelectedDate(date);
                        setCalendarOpened(false);
                      }}
                      inline
                      locale="ru"
                      calendarStartDay={1}
                      showMonthDropdown
                      showYearDropdown
                      dropdownMode="select"
                      dateFormat="dd.MM.yyyy"
                      className={isDark ? "dark-theme-datepicker" : ""}
                      popperClassName="no-border-popper"
                      calendarClassName={isDark ? "dark-calendar" : ""}
                    />
                  </Popover.Dropdown>
            </Popover>
          </div>
        </div>
      </div>
    </AppShell.Footer>
  );
}

export default Footer;