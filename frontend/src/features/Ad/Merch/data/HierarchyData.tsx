import { API } from '../../../../config/constants';

export interface DataItem {
  id: string;
  name: string;
  description: string;
  child: string[];
  layer: number;
  imageUrl?: string;
  isActive?: boolean;
  attachmentsCount?: number;
  hasChildren?: boolean; // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –¥–µ—Ç–µ–π
  sortOrder?: number;
}

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE = `${API}/add/merch`;

//----------------------------------------------–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏ -------------------------------
//–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
export const getHierarchyData = async (parentId?: string, layer?: number): Promise<DataItem[]> => {
  try {
    const params = new URLSearchParams();
    if (parentId) params.append('parentId', parentId);
    if (layer !== undefined) {
      params.append('layer', layer.toString());
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (layer = 1)
      params.append('layer', '1');
    }
    
    const url = `${API_BASE}/categories?${params.toString()}`;
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
    }
    const data = await response.json(); 
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏:', error);
    throw error;
  }
};

let globalDataList: DataItem[] = [];
(async () => {
  try {
    globalDataList = await getHierarchyData();
    console.log('‚úÖ globalDataList –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', globalDataList.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ globalDataList:', error);
    globalDataList = []; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
})();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É)
export const getGlobalDataList = (): DataItem[] => {
  return globalDataList;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
export const setGlobalDataList = (newDataList: DataItem[]): void => {
  globalDataList = newDataList;
  console.log('üíæ globalDataList –æ–±–Ω–æ–≤–ª–µ–Ω:', globalDataList.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
};

//-------------------------------------–§—É–Ω–∫—Ü–∏–∏--------------------------------------------------
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
export const addCategory = async (categoryData: {
  name: string;
  description?: string;
  parentId?: string;
  images?: File[]; // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
}): Promise<DataItem> => {
  try {
    const formData = new FormData();
    formData.append('name', categoryData.name);
    formData.append('description', categoryData.description || '');
    if (categoryData.parentId) {
      formData.append('parentId', categoryData.parentId.toString());
    }
    if (categoryData.images && categoryData.images.length > 0) {
      categoryData.images.forEach(image => {
        formData.append('images', image); // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'images' –∫–∞–∫ –≤ middleware
      });
    }

    const response = await fetch(`${API_BASE}/categories`, {
      method: 'POST',
      body: formData, // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type, FormData —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –≤ globalDataList
    globalDataList = [...globalDataList, data];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ children –≤ globalDataList
    if (categoryData.parentId) {
      globalDataList = globalDataList.map(item => 
        item.id === categoryData.parentId 
          ? { ...item, child: [...item.child, data.id] }
          : item
      );
    }
    
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', data.imageUrl ? '–¥–∞' : '–Ω–µ—Ç');
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
export const updateCategory = async (id: string, categoryData: {
  name?: string;
  description?: string;
  images?: File[]; // File[] –¥–ª—è –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
}): Promise<DataItem> => {
  try {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    const formData = new FormData();
    if (categoryData.name) formData.append('name', categoryData.name);
    if (categoryData.description !== undefined) formData.append('description', categoryData.description);
    if (categoryData.images && categoryData.images.length > 0) {
      categoryData.images.forEach(image => {
        formData.append('images', image);
      });
    }

    const response = await fetch(`${API_BASE}/categories/${id}`, {
      method: 'PUT',
      body: formData,
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} - ${errorText}`);
    }
 
    const data = await response.json();
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú –≤ globalDataList
    globalDataList = globalDataList.map(item => 
      item.id === id ? data : item
    );
    
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', data.imageUrl ? '–æ–±–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ—Ç');
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const deleteCategory = async (id: string): Promise<void> => {
  try {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${id}...`);
    
    const response = await fetch(`${API_BASE}/categories/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} - ${errorText}`);
    }
    
    // –£–î–ê–õ–Ø–ï–ú –∏–∑ globalDataList
    const categoryToDelete = globalDataList.find(item => item.id === id);
    globalDataList = globalDataList.filter(item => item.id !== id);
    
    // –£–î–ê–õ–Ø–ï–ú –∏–∑ children –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categoryToDelete) {
      globalDataList = globalDataList.map(item => ({
        ...item,
        child: item.child.filter(childId => childId !== id)
      }));
    }
    
    console.log('üíæ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ globalDataList, ID:', id);
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const deleteCategoryImage = async (id: string): Promise<DataItem> => {
  try {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${id}...`);
    
    const response = await fetch(`${API_BASE}/categories/${id}/image`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú –≤ globalDataList
    globalDataList = globalDataList.map(item => 
      item.id === id ? data : item
    );
    
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–æ');
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (layer = 0)
export const getCategoryCards = async (categoryId: string): Promise<DataItem[]> => {
  try {
    const data = await getHierarchyData(categoryId, 0);
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ globalDataList —Å –¥–µ—Ç—å–º–∏
export const getChildCategories = (item: DataItem): DataItem[] => {
  return globalDataList.filter(dataItem => 
    item.child.includes(dataItem.id)
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const getCategoryImageUrl = (category: DataItem): string | null => {
  return category.imageUrl || null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
export const hasCategoryImage = (category: DataItem): boolean => {
  return !!category.imageUrl;
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default {
  getHierarchyData,
  getCategoryCards,
  addCategory,
  updateCategory,
  deleteCategory,
  deleteCategoryImage,
  getChildCategories,
  getCategoryImageUrl,
  hasCategoryImage,
  getGlobalDataList,
  setGlobalDataList
};
