// CardData.ts - API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
import { useState, useCallback } from 'react';
import { API } from '../../../../config/constants';

// –¢–∏–ø –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –±—ç–∫–µ–Ω–¥–∞
export interface CardItem {
  id: string;
  name: string;
  description: string;
  imageUrls: string[];
  isActive: boolean;
  categoryId: string;
  category: {
    id: string;
    name: string;
  };
  createdAt: string;
  updatedAt: string;
}

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE = `${API}/add/merch`;

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
const handleResponse = async (response: Response, url: string) => {
  console.log(`üìä –û—Ç–≤–µ—Ç –æ—Ç ${url}:`, {
    status: response.status,
    statusText: response.statusText,
    ok: response.ok
  });

  const contentType = response.headers.get('content-type');
  
  if (contentType && contentType.includes('application/json')) {
    const data = await response.json();
    return data;
  } else {
    const text = await response.text();
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç:', text.substring(0, 200));
    throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const fetchCardsByCategory = async (
  categoryId: string, 
  page: number = 1, 
  limit: number = 20, 
  active?: boolean
): Promise<{ cards: CardItem[]; pagination: any }> => {
  try {
    const params = new URLSearchParams();
    params.append('page', page.toString());
    params.append('limit', limit.toString());
    if (active !== undefined) params.append('active', active.toString());
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (layer = 0)
    params.append('parentId', categoryId);
    params.append('layer', '0');
    
    const url = `${API_BASE}/categories?${params.toString()}`;
    console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏: ${url}`);
    
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
    }
    
    const data = await handleResponse(response, url);
    
    if (data && Array.isArray(data)) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç CardItem
      const cards: CardItem[] = data.map((item: any) => ({
        id: item.id,
        name: item.name,
        description: item.description || '',
        imageUrls: (item.attachments || []).map((att: any) => att.source),
        isActive: item.isActive,
        categoryId: categoryId,
        category: {
          id: categoryId,
          name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' // TODO: –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        },
        createdAt: item.createdAt,
        updatedAt: item.updatedAt
      }));
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})`);
      return { 
        cards, 
        pagination: { 
          page, 
          limit, 
          total: cards.length, 
          totalPages: Math.ceil(cards.length / limit) 
        } 
      };
    } else {
      console.log('üì≠ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', data);
      return { cards: [], pagination: { page: 1, limit, total: 0, totalPages: 0 } };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
export const fetchAllCards = async (): Promise<CardItem[]> => {
  try {
    const url = `${API_BASE}/cards`;
    console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏: ${url}`);
    
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
    }
    
    const data = await handleResponse(response, url);
    
    if (Array.isArray(data)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ–≥–æ`);
      return data;
    } else {
      console.log('üì≠ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤:', data);
      return [];
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–¥–ª—è –±–æ—Ç–∞)
export const fetchActiveCards = async (): Promise<CardItem[]> => {
  try {
    const url = `${API_BASE}/cards/active`;
    console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –±–æ—Ç–∞: ${url}`);
    
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
    }
    
    const data = await handleResponse(response, url);
    
    if (Array.isArray(data)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –±–æ—Ç–∞`);
      return data;
    } else {
      console.log('üì≠ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤:', data);
      return [];
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
export const createCard = async (cardData: {
  name: string;
  description: string;
  categoryId: string;
  isActive?: boolean;
  images?: File[];
}): Promise<CardItem> => {
  try {
    const url = `${API_BASE}/cards`;
    console.log('üìù –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');

    const formData = new FormData();
    formData.append('name', cardData.name);
    formData.append('description', cardData.description);
    formData.append('categoryId', cardData.categoryId.toString());
    formData.append('isActive', (cardData.isActive ?? true).toString());
    
    if (cardData.images && cardData.images.length > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      cardData.images.forEach(image => {
        formData.append('images', image);
      });
      console.log(`üìÅ –î–æ–±–∞–≤–ª–µ–Ω–æ ${cardData.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    }

    const response = await fetch(url, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }

    const data = await handleResponse(response, url);
    console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç CardItem
    const card: CardItem = {
      id: data.id,
      name: data.name,
      description: data.description || '',
      imageUrls: data.imageUrl ? [data.imageUrl] : [],
      isActive: data.isActive,
      categoryId: cardData.categoryId,
      category: {
        id: cardData.categoryId,
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' // TODO: –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      },
      createdAt: data.createdAt,
      updatedAt: data.updatedAt
    };
    
    return card;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
export const updateCard = async (id: string, cardData: Partial<{
  name: string;
  description: string;
  isActive: boolean;
  imageUrl: string;
  imageUrls: string[]; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  categoryId: string;
  images?: File[]; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
}>): Promise<CardItem> => {
  try {
    const url = `${API_BASE}/cards/${id}`;
    console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${id}:`, cardData);
    
    const formData = new FormData();
    if (cardData.name) formData.append('name', cardData.name);
    if (cardData.description !== undefined) formData.append('description', cardData.description);
    if (cardData.isActive !== undefined) formData.append('isActive', cardData.isActive.toString());
    
    const response = await fetch(url, {
      method: 'PUT',
      body: formData,
    });
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }
    
    const data = await handleResponse(response, url);
    console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç CardItem
    const card: CardItem = {
      id: data.id,
      name: data.name,
      description: data.description || '',
      imageUrls: data.attachments ? data.attachments.map((att: any) => att.source) : [],
      isActive: data.isActive,
      categoryId: cardData.categoryId || '',
      category: {
        id: cardData.categoryId || '',
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' // TODO: –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      },
      createdAt: data.createdAt,
      updatedAt: data.updatedAt
    };
    
    return card;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const updateCardImages = async (id: string, imageUrls: string[]): Promise<CardItem> => {
  try {
    const url = `${API_BASE}/cards/${id}/images/order`;
    console.log(`üñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏ ${id}:`, imageUrls);
    
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ imageUrls }),
    });
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }
    
    const data = await handleResponse(response, url);
    console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω:', data);

    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
export const addCardImages = async (id: string, images: File[]): Promise<CardItem> => {
  try {
    const url = `${API_BASE}/cards/${id}/images`;
    console.log(`üì§ –î–æ–±–∞–≤–ª—è–µ–º ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –∫–∞—Ä—Ç–æ—á–∫–µ ${id}`);

    const formData = new FormData();
    images.forEach((image) => {
      formData.append('images', image);
    });

    const response = await fetch(url, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }

    const data = await handleResponse(response, url);
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã:', data);
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
export const deleteCardImage = async (id: string, imageUrl: string): Promise<CardItem> => {
  try {
    const url = `${API_BASE}/cards/${id}/images`;
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ${id}:`, imageUrl);
    
    const response = await fetch(url, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ imageUrl }),
    });
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }
    
    const data = await handleResponse(response, url);
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', data);

    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
export const toggleCardActive = async (id: string, isActive: boolean): Promise<CardItem> => {
  try {
    const url = `${API_BASE}/categories/${id}`;
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ ${id} –Ω–∞:`, isActive);
    
    const formData = new FormData();
    formData.append('isActive', isActive.toString());
    
    const response = await fetch(url, {
      method: 'PUT',
      body: formData,
    });
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }
    
    const data = await handleResponse(response, url);
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç CardItem
    const card: CardItem = {
      id: data.id,
      name: data.name,
      description: data.description || '',
      imageUrls: data.imageUrl ? [data.imageUrl] : [],
      isActive: data.isActive,
      categoryId: '', // TODO: –ø–æ–ª—É—á–∏—Ç—å categoryId
      category: {
        id: '',
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
      },
      createdAt: data.createdAt,
      updatedAt: data.updatedAt
    };
    
    return card;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
export const deleteCard = async (id: string): Promise<void> => {
  try {
    const url = `${API_BASE}/cards/${id}`;
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${id}...`);
    
    const response = await fetch(url, {
      method: 'DELETE',
    });
    
    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }
    
    await handleResponse(response, url);
    console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
    throw error;
  }
};

// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
export function useCardStore() {
  const [cards, setCards] = useState<CardItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 20,
    total: 0,
    totalPages: 0
  });

  const loadCardsByCategory = useCallback(async (
    categoryId: string, 
    page: number = 1, 
    limit: number = 20, 
    active?: boolean
  ) => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})`);
      
      const data = await fetchCardsByCategory(categoryId, page, limit, active);
      setCards(data.cards);
      setPagination(data.pagination);
      
      console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ ${data.pagination.total}`);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const loadAllCards = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫');
      
      const data = await fetchAllCards();
      setCards(data);
      
      console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:', errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const loadActiveCards = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –±–æ—Ç–∞');
      
      const data = await fetchActiveCards();
      setCards(data);
      
      console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:', errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const addCard = useCallback(async (cardData: {
    name: string;
    description: string;
    categoryId: string;
    isActive?: boolean;
    images?: File[];
  }) => {
    try {
      setLoading(true);
      setError(null);
      console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É...');
      
      const newCard = await createCard(cardData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      setCards(prev => [newCard, ...prev]);
      
      console.log('üéâ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      return newCard;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const updateCardInStore = useCallback(async (id: string, cardData: Partial<{
    name: string;
    description: string;
    isActive: boolean;
    imageUrl: string;
    categoryId: string;
  }>) => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üéØ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${id}...`);
      
      const updatedCard = await updateCard(id, cardData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setCards(prev => prev.map(card => 
        card.id === id ? updatedCard : card
      ));
      
      console.log('üéâ –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
      return updatedCard;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const updateCardImagesInStore = useCallback(async (id: string, imageUrls: string[]) => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üéØ –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${id}...`);
      
      const updatedCard = await updateCardImages(id, imageUrls);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setCards(prev => prev.map(card => 
        card.id === id ? updatedCard : card
      ));
      
      console.log('üéâ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
      return updatedCard;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏:', errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const addCardImagesInStore = useCallback(async (id: string, images: File[]) => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üéØ –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ ${id}...`);
      
      const updatedCard = await addCardImages(id, images);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setCards(prev => prev.map(card => 
        card.id === id ? updatedCard : card
      ));
      
      console.log('üéâ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
      return updatedCard;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –∫–∞—Ä—Ç–æ—á–∫–µ:', errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteCardImageInStore = useCallback(async (id: string, imageUrl: string) => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üéØ –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ${id}...`);
      
      const updatedCard = await deleteCardImage(id, imageUrl);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setCards(prev => prev.map(card => 
        card.id === id ? updatedCard : card
      ));
      
      console.log('üéâ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
      return updatedCard;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const toggleCardActiveInStore = useCallback(async (id: string, isActive: boolean) => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üéØ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ ${id}...`);
      
      const updatedCard = await toggleCardActive(id, isActive);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      setCards(prev => prev.map(card => 
        card.id === id ? updatedCard : card
      ));
      
      console.log('üéâ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
      return updatedCard;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const removeCard = useCallback(async (id: string) => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üéØ –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${id}...`);
      
      await deleteCard(id);
      
      // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setCards(prev => prev.filter(card => card.id !== id));
      
      console.log('üéâ –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    cards,
    loading,
    error,
    pagination,
    setCards,
    loadCardsByCategory,
    loadAllCards,
    loadActiveCards,
    addCard,
    updateCard: updateCardInStore,
    updateCardImages: updateCardImagesInStore,
    addCardImages: addCardImagesInStore,
    deleteCardImage: deleteCardImageInStore,
    toggleCardActive: toggleCardActiveInStore,
    removeCard
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default {
  fetchCardsByCategory,
  fetchAllCards,
  fetchActiveCards,
  createCard,
  updateCard,
  updateCardImages,
  addCardImages,
  deleteCardImage,
  toggleCardActive,
  deleteCard,
  useCardStore
};
