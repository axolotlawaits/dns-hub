import React, { useState, useRef, useEffect, useCallback } from 'react';
import { 
  Paper, 
  Group, 
  Button, 
  Text, 
  Stack, 
  Badge,
  Progress,
  Box
} from '@mantine/core';
import { 
  IconPlayerPlay, 
  IconPlayerPause, 
  IconClock,
  IconWifi,
  IconWifiOff
} from '@tabler/icons-react';
import { API } from '../../../../config/constants';

interface WebRadioPlayerProps {
  className?: string;
  branchName?: string;
  branchType?: string;
  workingTime?: {
    start: string;
    end: string;
  };
}

interface RadioStream {
  id: string;
  name: string;
  branchTypeOfDist: string;
  frequencySongs: number;
  fadeInDuration: number;
  volumeLevel: number;
  startDate: string;
  endDate?: string;
  attachment?: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

interface MusicTrack {
  id: string;
  fileName: string;
  filePath?: string;
  url: string;
  duration?: number;
  index: number;
}

type PlaybackState = 'stopped' | 'playing' | 'paused' | 'loading' | 'error';
type DownloadState = 'idle' | 'downloading' | 'complete' | 'error';

const WebRadioPlayer: React.FC<WebRadioPlayerProps> = ({ 
  className, 
  branchName = "–ú–æ–π —Ñ–∏–ª–∏–∞–ª", 
  branchType = "–ú–∞–≥–∞–∑–∏–Ω",
  workingTime = { start: "08:00", end: "22:00" }
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  const [playbackState, setPlaybackState] = useState<PlaybackState>('stopped');
  const [downloadState] = useState<DownloadState>('idle');
  const [volume] = useState(80);
  const [isMuted] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const [currentStream, setCurrentStream] = useState<RadioStream | null>(null);
  const [currentTrack, setCurrentTrack] = useState<MusicTrack | null>(null);
  const [streams, setStreams] = useState<RadioStream[]>([]);
  const [musicTracks, setMusicTracks] = useState<MusicTrack[]>([]);
  const [songsPlayed, setSongsPlayed] = useState(0);
  const [isPlayingStream, setIsPlayingStream] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [error, setError] = useState<string | null>(null);
  const [isOnline, setIsOnline] = useState(true);
  const [downloadProgress] = useState(0);
  const [downloadedCount] = useState(0);
  const [totalFiles] = useState(0);
  
  const audioRef = useRef<HTMLAudioElement>(null);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const registerWebPlayer = useCallback(async () => {
    try {
      const deviceData = {
        userEmail: 'web-player@dns-hub.local',
        branchType: branchType,
        deviceName: 'DNS Radio Web',
        vendor: 'Web Browser',
        network: window.location.hostname,
        number: '1',
        app: 'DNS Radio Web',
        os: navigator.userAgent,
        deviceIP: window.location.hostname,
        macAddress: 'web-player-' + Date.now()
      };

      const response = await fetch(`${API}/device/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(deviceData)
      });

      if (response.ok) {
        console.log('‚úÖ [WebRadioPlayer] –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
      } else {
        console.log('‚ö†Ô∏è [WebRadioPlayer] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', response.status);
      }
    } catch (err) {
      console.log('‚ö†Ô∏è [WebRadioPlayer] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
    }
  }, [branchType]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π
  const loadMusicFolders = useCallback(async () => {
    try {
      const response = await fetch(`${API}/radio/folders`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π');
      }
      
      const data = await response.json();
            if (data.success && data.folders && data.folders.length > 0) {
              // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
              const currentFolder = data.folders[0];
              console.log('üéµ [WebRadioPlayer] –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å –º—É–∑—ã–∫–æ–π:', currentFolder.name);
              return currentFolder.name;
            }
      return null;
    } catch (err) {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π:', err);
      return null;
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∏ –∏–∑ –ø–∞–ø–∫–∏
  const loadMusicFromFolder = useCallback(async (folderName: string) => {
    try {
      const response = await fetch(`${API}/radio/folder/${folderName}/music`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏');
      }
      
      const data = await response.json();
      if (data.success && data.files) {
        const musicTracks = data.files
          .sort((a: any, b: any) => a.name.localeCompare(b.name)) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
          .map((file: any, index: number) => ({
            id: `${file.name}_${index}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            fileName: file.name,
            url: `${API}/public/retail/radio/music/${folderName}/${file.name}`,
            isDownloaded: false, // –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            fileSize: file.size || 0,
            index: index // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          }));
        setMusicTracks(musicTracks);
        console.log('üéµ [WebRadioPlayer] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:', musicTracks.length);
        console.log('üéµ [WebRadioPlayer] –ü–æ—Ä—è–¥–æ–∫ —Ç—Ä–µ–∫–æ–≤:', musicTracks.map(t => `${t.index}: ${t.fileName}`));
        return musicTracks;
      }
      return [];
    } catch (err) {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏:', err);
      return [];
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤
  const loadStreams = useCallback(async () => {
    try {
      setError(null);
      
      const response = await fetch(`${API}/radio/streams`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–æ–≤');
      }
      
      const data = await response.json();
      if (data.success && data.data) {
        setStreams(data.data);
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
        const activeStream = data.data.find((stream: RadioStream) => stream.isActive);
        if (activeStream) {
          setCurrentStream(activeStream);
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const initializePlayer = async () => {
      await loadStreams();
      const folderName = await loadMusicFolders();
      if (folderName) {
        await loadMusicFromFolder(folderName);
      }
    };
    initializePlayer();
  }, [loadStreams, loadMusicFolders, loadMusicFromFolder]);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π useEffect)
  useEffect(() => {
    registerWebPlayer();
  }, [registerWebPlayer]);


  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = isMuted ? 0 : volume / 100;
    }
  }, [volume, isMuted]);



  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
  const isWithinWorkingTime = useCallback((): boolean => {
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    
    const [startHour, startMin] = workingTime.start.split(':').map(Number);
    const [endHour, endMin] = workingTime.end.split(':').map(Number);
    
    const startTime = startHour * 60 + startMin;
    const endTime = endHour * 60 + endMin;
    
    if (startTime < endTime) {
      // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 08:00 - 22:00
      return currentTime >= startTime && currentTime <= endTime;
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 22:00 - 06:00
      return currentTime >= startTime || currentTime <= endTime;
    }
  }, [workingTime]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const checkInternetConnection = useCallback(async () => {
    try {
      const response = await fetch(`${API}/radio/streams`, { 
        method: 'HEAD',
        cache: 'no-cache'
      });
      setIsOnline(response.ok);
    } catch {
      setIsOnline(false);
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
  useEffect(() => {
    const interval = setInterval(() => {
      const withinTime = isWithinWorkingTime();
      if (!withinTime && playbackState === 'playing') {
        setPlaybackState('stopped');
        if (audioRef.current) {
          audioRef.current.pause();
        }
      }
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [isWithinWorkingTime, playbackState]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  useEffect(() => {
    const interval = setInterval(checkInternetConnection, 10000);
    checkInternetConnection(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    return () => clearInterval(interval);
  }, [checkInternetConnection]);

  // Heartbeat –¥–ª—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞
  const sendHeartbeat = useCallback(async () => {
    try {
      const heartbeatData = {
        deviceId: 'web-player-' + Date.now(),
        appVersion: '1.0.0',
        macAddress: 'web-player-' + Date.now(),
        currentIP: window.location.hostname,
        userEmail: 'web-player@dns-hub.local'
      };

      const response = await fetch(`${API}/device/heartbeat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(heartbeatData)
      });

      if (response.ok) {
        console.log('üíì [WebRadioPlayer] Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }
    } catch (err) {
      console.log('‚ö†Ô∏è [WebRadioPlayer] –û—à–∏–±–∫–∞ heartbeat:', err);
    }
  }, []);

  // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞/–ø–æ—Ç–æ–∫–∞
  const findNextTrack = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª–∏–Ω–∏—Ç—å –ø–æ—Ç–æ–∫ (–∫–∞–∂–¥—ã–µ 3 —Ç—Ä–µ–∫–∞)
    const shouldPlayStream = songsPlayed > 0 && songsPlayed % 3 === 0;
    
    if (shouldPlayStream && streams.length > 0 && !isPlayingStream) {
      // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
      const activeStream = streams.find(stream => stream.isActive);
      if (activeStream) {
        console.log('üéµ [WebRadioPlayer] –í—Ä–µ–º—è –¥–ª—è –ø–æ—Ç–æ–∫–∞:', activeStream.name);
        return { type: 'stream', content: activeStream };
      }
    }
    
    // –ò–Ω–∞—á–µ –∏–≥—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
    if (musicTracks.length > 0) {
      const currentIndex = currentTrack ? currentTrack.index : -1;
      const nextIndex = (currentIndex + 1) % musicTracks.length;
      const nextTrack = musicTracks.find(track => track.index === nextIndex);
      
      if (nextTrack) {
        console.log('üéµ [WebRadioPlayer] –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫:', nextTrack.fileName, '–∏–Ω–¥–µ–∫—Å:', nextIndex);
        return { type: 'track', content: nextTrack };
      }
    }
    
    return null;
  }, [songsPlayed, streams, isPlayingStream, musicTracks, currentTrack]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
  const playTrack = useCallback(async (track: MusicTrack) => {
    if (!audioRef.current) return;
    
    try {
      setPlaybackState('loading');
      setCurrentTrack(track);
      setCurrentStream(null);
      setIsPlayingStream(false);
      
      audioRef.current.src = track.url;
      await audioRef.current.play();
      setPlaybackState('playing');
      setError(null);
      console.log('üéµ [WebRadioPlayer] –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫:', track.fileName);
    } catch (err) {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫');
      setPlaybackState('error');
    }
  }, []);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
  const playStream = useCallback(async (stream: RadioStream) => {
    if (!audioRef.current) return;
    
    try {
      setPlaybackState('loading');
      setCurrentStream(stream);
      setCurrentTrack(null);
      setIsPlayingStream(true);
      
      const streamUrl = `${API}/radio/stream/${stream.id}/play`;
      audioRef.current.src = streamUrl;
      await audioRef.current.play();
      setPlaybackState('playing');
      setError(null);
      console.log('üéµ [WebRadioPlayer] –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Ç–æ–∫:', stream.name);
    } catch (err) {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ—Ç–æ–∫');
      setPlaybackState('error');
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞—É–¥–∏–æ
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const handleTimeUpdate = () => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    };

    const handleLoadedMetadata = () => {
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    };

    const handleEnded = async () => {
      console.log('üéµ [WebRadioPlayer] –¢—Ä–µ–∫/–ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
      
      if (isPlayingStream) {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞–ª –ø–æ—Ç–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º—É–∑—ã–∫—É
        console.log('üéµ [WebRadioPlayer] –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º—É–∑—ã–∫—É');
        setIsPlayingStream(false);
        setCurrentStream(null);
      } else {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞–ª —Ç—Ä–µ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        setSongsPlayed(prev => prev + 1);
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const nextContent = findNextTrack();
      if (nextContent) {
        if (nextContent.type === 'track') {
          await playTrack(nextContent.content as MusicTrack);
        } else if (nextContent.type === 'stream') {
          await playStream(nextContent.content as RadioStream);
        }
      } else {
        setPlaybackState('stopped');
      }
    };

    const handleError = (event: any) => {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', event);
      setError('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
      setPlaybackState('error');
    };

    audio.addEventListener('timeupdate', handleTimeUpdate);
    audio.addEventListener('loadedmetadata', handleLoadedMetadata);
    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);

    return () => {
      audio.removeEventListener('timeupdate', handleTimeUpdate);
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
    };
  }, [findNextTrack, playTrack, playStream, isPlayingStream]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const interval = setInterval(sendHeartbeat, 30000);
    sendHeartbeat(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    return () => clearInterval(interval);
  }, [sendHeartbeat]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const handlePlayPause = async () => {
    if (!audioRef.current) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if (!isWithinWorkingTime()) {
      setError('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ');
      return;
    }

    if (playbackState === 'playing') {
      audioRef.current.pause();
      setPlaybackState('paused');
    } else if (playbackState === 'paused') {
      try {
        await audioRef.current.play();
        setPlaybackState('playing');
        setError(null);
      } catch (err) {
        console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
        setPlaybackState('error');
      }
    } else {
      // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      const nextContent = findNextTrack();
      if (nextContent) {
        if (nextContent.type === 'track') {
          await playTrack(nextContent.content as MusicTrack);
        } else if (nextContent.type === 'stream') {
          await playStream(nextContent.content as RadioStream);
        }
      } else {
        setError('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      }
    }
  };

  const handleStop = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setPlaybackState('stopped');
    }
  };


  const handleStreamSelect = (stream: RadioStream) => {
    setCurrentStream(stream);
    setCurrentTrack(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    if (playbackState === 'playing') {
      handleStop();
    }
  };

  return (
    <Box className={`web-radio-player ${className || ''}`}>
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ */}
      {!isOnline && (
        <Paper 
          p="sm" 
          mb="md" 
          radius="md"
          style={{
            background: 'var(--color-error-100)',
            border: '1px solid var(--color-error-500)',
            display: 'flex',
            alignItems: 'center',
            gap: 'var(--space-2)'
          }}
        >
          <IconWifiOff size={20} color="var(--color-error-500)" />
          <Text size="sm" c="red" fw={500}>
            –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
          </Text>
          <Text size="xs" c="dimmed" ml="auto">
            –†–∞–±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
          </Text>
        </Paper>
      )}

      <Paper 
        p="xl" 
        radius="lg" 
        shadow="sm"
        style={{
          background: 'var(--theme-bg-elevated)',
          border: '1px solid var(--theme-border)',
          backdropFilter: 'blur(8px)',
          WebkitBackdropFilter: 'blur(8px)',
          minHeight: '500px',
          position: 'relative'
        }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º */}
        <Group justify="space-between" align="center" mb="xl">
          <Group gap="md" align="center">
            <Box
              style={{
                width: '120px',
                height: '70px',
                background: 'linear-gradient(135deg, var(--color-primary-500), var(--color-primary-600))',
                borderRadius: 'var(--radius-md)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: 'white',
                fontWeight: 'bold',
                fontSize: '18px'
              }}
            >
              DNS Hub
            </Box>
            <Box>
              <Text size="xs" c="dimmed" style={{ fontFamily: 'var(--font-family-primary)' }}>
                {new Date().toLocaleDateString('ru-RU', { 
                  month: 'long', 
                  year: 'numeric' 
                })}
              </Text>
              <Text size="sm" c="dimmed" style={{ fontFamily: 'var(--font-family-primary)' }}>
                {new Date().toLocaleDateString('ru-RU')}
              </Text>
            </Box>
          </Group>
          
          <Group gap="xs" align="center">
            <IconWifi 
              size={20} 
              color={isOnline ? 'var(--color-success-500)' : 'var(--color-error-500)'} 
            />
            <Text size="xs" c={isOnline ? 'green' : 'red'}>
              {isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
            </Text>
          </Group>
        </Group>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –∫–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
        <Box
          style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '300px',
            gap: 'var(--space-4)'
          }}
        >
          {/* –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
          <Button
            size="xl"
            radius="xl"
            leftSection={
              playbackState === 'loading' ? 
                <div style={{ 
                  width: '32px', 
                  height: '32px', 
                  border: '3px solid white', 
                  borderTop: '3px solid transparent', 
                  borderRadius: '50%', 
                  animation: 'spin 1s linear infinite' 
                }} /> :
                playbackState === 'playing' ? 
                  <IconPlayerPause size={32} /> : 
                  <IconPlayerPlay size={32} />
            }
            onClick={handlePlayPause}
            disabled={!isWithinWorkingTime() || (!currentStream && !currentTrack) || playbackState === 'loading'}
            style={{
              width: '80px',
              height: '80px',
              background: playbackState === 'loading' ? 
                'linear-gradient(135deg, var(--color-gray-500), var(--color-gray-600))' :
                'linear-gradient(135deg, var(--color-primary-500), var(--color-primary-600))',
              border: 'none',
              boxShadow: 'var(--theme-shadow-lg)',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          />

          {/* –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫/–ø–æ—Ç–æ–∫ */}
          <Box style={{ textAlign: 'center', maxWidth: '400px' }}>
            {isPlayingStream && currentStream ? (
              <Stack gap="xs" align="center">
                <Text size="xl" fw={600} style={{ color: 'var(--theme-text-primary)' }}>
                  üìª {currentStream.name}
                </Text>
                <Text size="sm" c="dimmed">
                  {currentStream.branchTypeOfDist}
                </Text>
                <Text size="xs" c="dimmed">
                  –†–∞–¥–∏–æ –ø–æ—Ç–æ–∫
                </Text>
              </Stack>
            ) : currentTrack ? (
              <Stack gap="xs" align="center">
                <Text size="xl" fw={600} style={{ color: 'var(--theme-text-primary)' }}>
                  üéµ {currentTrack.fileName.replace('.mp3', '')}
                </Text>
                <Text size="sm" c="dimmed">
                  –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
                </Text>
                {musicTracks.length > 0 && (
                  <Text size="xs" c="dimmed">
                    –¢—Ä–µ–∫–æ–≤: {musicTracks.length} ‚Ä¢ –°—ã–≥—Ä–∞–Ω–æ: {songsPlayed}
                  </Text>
                )}
              </Stack>
            ) : (
              <Stack gap="xs" align="center">
                <Text size="lg" c="dimmed" ta="center">
                  {!isWithinWorkingTime() ? '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ' : 
                   musicTracks.length > 0 ? '–ù–∞–∂–º–∏—Ç–µ Play –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è' : '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º—É–∑—ã–∫–∞...'}
                </Text>
                {musicTracks.length > 0 && (
                  <Text size="xs" c="dimmed">
                    –¢—Ä–µ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {musicTracks.length}
                  </Text>
                )}
              </Stack>
            )}
          </Box>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {downloadState === 'downloading' && (
            <Box style={{ width: '100%', maxWidth: '300px' }}>
              <Progress 
                value={downloadProgress} 
                size="sm" 
                radius="xl"
                style={{ marginBottom: 'var(--space-2)' }}
              />
              <Text size="xs" c="dimmed" ta="center">
                –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloadedCount} –∏–∑ {totalFiles} —Ñ–∞–π–ª–æ–≤
              </Text>
            </Box>
          )}
        </Box>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ –≤–Ω–∏–∑—É */}
        <Box
          style={{
            position: 'absolute',
            bottom: '24px',
            left: '24px',
            right: '24px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'flex-end'
          }}
        >
          <Box>
            <Text size="xl" fw={500} style={{ color: 'var(--theme-text-primary)' }}>
              {branchName}
            </Text>
            <Text size="sm" c="dimmed" mt="xs">
              {branchType} ({workingTime.start} ‚Äî {workingTime.end})
            </Text>
          </Box>
          
          <Box style={{ textAlign: 'right' }}>
            <Group gap="xs" align="center" mb="xs">
              <IconClock size={16} color="var(--theme-text-secondary)" />
              <Text size="xs" c="dimmed">
                {isWithinWorkingTime() ? '–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è' : '–í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'}
              </Text>
            </Group>
            {downloadState === 'complete' && (
              <Text size="xs" c="dimmed">
                –ì–æ—Ç–æ–≤–æ: {downloadedCount} —Ñ–∞–π–ª–æ–≤
              </Text>
            )}
          </Box>
        </Box>
      </Paper>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤ */}
      {streams.length > 0 && (
        <Paper p="md" radius="lg" shadow="sm" mt="md" style={{ background: 'var(--theme-bg-elevated)' }}>
          <Text size="md" fw={500} mb="md" style={{ color: 'var(--theme-text-primary)' }}>
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–∏:
          </Text>
          <Stack gap="xs">
            {streams.map((stream) => (
              <Paper
                key={stream.id}
                p="sm"
                radius="md"
                className={`stream-item ${currentStream?.id === stream.id ? 'active' : ''}`}
                style={{
                  background: currentStream?.id === stream.id ? 'var(--color-primary-100)' : 'var(--theme-bg-subtle)',
                  border: currentStream?.id === stream.id ? '1px solid var(--color-primary-500)' : '1px solid var(--theme-border)',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease'
                }}
                onClick={() => handleStreamSelect(stream)}
              >
                <Group justify="space-between" align="center">
                  <div>
                    <Text size="sm" fw={500}>
                      üìª {stream.name}
                    </Text>
                    <Text size="xs" c="dimmed">
                      {stream.branchTypeOfDist} ‚Ä¢ –ö–∞–∂–¥—ã–µ {stream.frequencySongs} –ø–µ—Å–µ–Ω
                    </Text>
                  </div>
                  <Badge 
                    size="xs" 
                    color={stream.isActive ? 'green' : 'gray'} 
                    variant="light"
                  >
                    {stream.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                  </Badge>
                </Group>
              </Paper>
            ))}
          </Stack>
        </Paper>
      )}

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <Paper 
          p="sm" 
          radius="md" 
          mt="md"
          style={{ 
            background: 'var(--color-error-100)', 
            border: '1px solid var(--color-error-500)' 
          }}
        >
          <Text size="sm" c="red">
            {error}
          </Text>
        </Paper>
      )}

      {/* –°–∫—Ä—ã—Ç—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç */}
      <audio ref={audioRef} preload="metadata" />
    </Box>
  );
};

export default WebRadioPlayer;
