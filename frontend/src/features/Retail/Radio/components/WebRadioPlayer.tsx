import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import { 
  Paper, 
  Group, 
  Button, 
  Text, 
  Stack, 
  Progress,
  Box,
  TextInput,
  Select
} from '@mantine/core';
import { 
  IconPlayerPlay, 
  IconPlayerPause, 
  IconClock,
  IconWifi, 
  IconWifiOff,
  IconBug,
  IconPlayerSkipForward
} from '@tabler/icons-react';
import { CustomModal } from '../../../../utils/CustomModal';
import { API } from '../../../../config/constants';
import { useUserContext } from '../../../../hooks/useUserContext';
import { useAccessContext } from '../../../../hooks/useAccessContext';

interface WebRadioPlayerProps {
  className?: string;
  branchName?: string;
  branchType?: string;
  workingTime?: {
    start: string;
    end: string;
  };
  onTimeChange?: (newTime: { start: string; end: string }) => void;
  isActive?: boolean; // –ù–æ–≤—ã–π –ø—Ä–æ–ø—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
}

interface RadioStream {
  id: string;
  name: string;
  branchTypeOfDist: string;
  frequencySongs: number;
  fadeInDuration: number;
  volumeLevel: number;
  startDate: string;
  endDate?: string;
  attachment?: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

interface MusicTrack {
  id: string;
  fileName: string;
  filePath?: string;
  url: string;
  duration?: number;
  index: number;
}

type PlaybackState = 'stopped' | 'playing' | 'paused' | 'loading' | 'error';
type DownloadState = 'idle' | 'downloading' | 'complete' | 'error';

const WebRadioPlayer: React.FC<WebRadioPlayerProps> = ({ 
  className, 
  branchName = "–ú–æ–π —Ñ–∏–ª–∏–∞–ª", 
  branchType = "–ú–∞–≥–∞–∑–∏–Ω",
  workingTime = { start: "08:00", end: "22:00" },
  onTimeChange,
  isActive = true
}) => {
  const { user } = useUserContext();
  const { access } = useAccessContext();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [userIP, setUserIP] = useState<string>('localhost');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Radio –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
  const hasRadioFullAccess = useMemo(() => {
    if (!user || !access) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (['DEVELOPER', 'ADMIN'].includes(user.role)) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ groups
    const radioAccess = access.find(tool => 
      tool.link === 'retail/radio' || tool.link === '/retail/radio'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø FULL
    return radioAccess?.accessLevel === 'FULL';
  }, [user, access]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
  const [timeModalOpen, setTimeModalOpen] = useState(false);
  const [tempTimeStart, setTempTimeStart] = useState(workingTime.start);
  const [tempTimeEnd, setTempTimeEnd] = useState(workingTime.end);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª–∏–∞–ª–∞
  const [branchTypeModalOpen, setBranchTypeModalOpen] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ localStorage
  const getStoredBranchType = useCallback(() => {
    if (!user?.email) return branchType;
    try {
      const stored = localStorage.getItem(`web-radio-player-branch-type-${user.email}`);
      return stored || branchType;
    } catch {
      return branchType;
    }
  }, [user?.email, branchType]);

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∏–ª–∏–∞–ª–∞
  const [localBranchType, setLocalBranchType] = useState<string>(getStoredBranchType());
  const [tempBranchType, setTempBranchType] = useState<string>(localBranchType);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
  const getUserIP = useCallback(async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º WebRTC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
      const pc = new RTCPeerConnection({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      });
      
      pc.createDataChannel('');
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);
      
      pc.onicecandidate = (event) => {
        if (event.candidate) {
          const candidate = event.candidate.candidate;
          const ipMatch = candidate.match(/([0-9]{1,3}(\.[0-9]{1,3}){3})/);
          if (ipMatch && !ipMatch[1].startsWith('127.') && !ipMatch[1].startsWith('169.254.')) {
            setUserIP(ipMatch[1]);
            // console.log('üåê [WebRadioPlayer] –ü–æ–ª—É—á–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', ipMatch[1]);
            pc.close();
          }
        }
      };
      
      // Fallback —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (userIP === 'localhost') {
          setUserIP(window.location.hostname);
          // console.log('‚ö†Ô∏è [WebRadioPlayer] –ò—Å–ø–æ–ª—å–∑—É–µ–º hostname –∫–∞–∫ fallback:', window.location.hostname);
        }
        pc.close();
      }, 3000);
      
    } catch (error) {
      console.warn('‚ö†Ô∏è [WebRadioPlayer] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP:', error);
      // Fallback –Ω–∞ hostname
      setUserIP(window.location.hostname);
    }
  }, [userIP]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const openTimeModal = useCallback(() => {
    setTempTimeStart(workingTime.start);
    setTempTimeEnd(workingTime.end);
    setTimeModalOpen(true);
  }, [workingTime.start, workingTime.end]);

  const closeTimeModal = useCallback(() => {
    setTimeModalOpen(false);
  }, []);

  const saveTimeChanges = useCallback(() => {
    if (onTimeChange && tempTimeStart && tempTimeEnd) {
      onTimeChange({ start: tempTimeStart, end: tempTimeEnd });
      setTimeModalOpen(false);
    }
  }, [onTimeChange, tempTimeStart, tempTimeEnd]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª–∏–∞–ª–∞
  const openBranchTypeModal = useCallback(() => {
    setTempBranchType(localBranchType);
    setBranchTypeModalOpen(true);
  }, [localBranchType]);

  const closeBranchTypeModal = useCallback(() => {
    setBranchTypeModalOpen(false);
  }, []);

  const saveBranchTypeChanges = useCallback(async () => {
    if (!user?.id || !tempBranchType) return;

    try {
      // –¢—Ä–µ–±—É–µ—Ç—Å—è UUID —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è PATCH /search/branch/:id/typeOfDist
      let branchUuid: string | null = (user as any)?.branchUuid || null;

      // –ï—Å–ª–∏ UUID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤ user.branch —è–≤–Ω–æ –Ω–µ UUID ‚Äî –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
      if (!branchUuid) {
        if (user.branch && uuidRegex.test(user.branch)) {
          branchUuid = user.branch;
        } else if (user.branch) {
          const query = encodeURIComponent(user.branch);
          const searchResp = await fetch(`${API}/search/branch?text=${query}&branchSearchType=name`);
          if (searchResp.ok) {
            const branches = await searchResp.json();
            const exact = Array.isArray(branches)
              ? branches.find((b: any) => b.name?.toLowerCase() === user.branch.toLowerCase())
              : null;
            branchUuid = exact?.uuid || branches?.[0]?.uuid || null;
          }
        }
      }

      if (!branchUuid) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å UUID —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è typeOfDist');
        return;
      }

      const response = await fetch(`${API}/search/branch/${branchUuid}/typeOfDist`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ typeOfDist: tempBranchType })
      });

      if (response.ok) {
        localStorage.setItem(`web-radio-player-branch-type-${user.email}`, tempBranchType);
        setLocalBranchType(tempBranchType);
        setBranchTypeModalOpen(false);
        setSongsPlayed(0);
        lastPlayedStreamIndexRef.current = -1;
        setLastTrackIndex(-1);
      } else {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª–∏–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª–∏–∞–ª–∞:', error);
    }
  }, [user?.id, user?.branch, user?.email, tempBranchType]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  const [playbackState, setPlaybackState] = useState<PlaybackState>('stopped');
  const [downloadState] = useState<DownloadState>('idle');
  // –£–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const [currentStream, setCurrentStream] = useState<RadioStream | null>(null);
  const [currentTrack, setCurrentTrack] = useState<MusicTrack | null>(null);
  // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  const [pendingStream, setPendingStream] = useState<RadioStream | null>(null);
  const [pendingTrack, setPendingTrack] = useState<MusicTrack | null>(null);
  const [streams, setStreams] = useState<RadioStream[]>([]);
  const [musicTracks, setMusicTracks] = useState<MusicTrack[]>([]);
  const [songsPlayed, setSongsPlayed] = useState(0);
  const [isPlayingStream, setIsPlayingStream] = useState(false);
  const lastPlayedStreamIndexRef = useRef<number>(-1);
  const [lastTrackIndex, setLastTrackIndex] = useState(-1);
  
  // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –≤ localStorage (—á—Ç–æ–±—ã –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å HMR/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
  const rotationStorageKey = useMemo(() => {
    const email = user?.email || 'unknown';
    const type = (localBranchType || 'default').toLowerCase();
    return `web-radio-last-stream-index-${email}-${type}`;
  }, [user?.email, localBranchType]);

  // –û—Ç–ø–µ—á–∞—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ id) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞
  const activeStreamsFingerprint = useMemo(() => {
    const norm = (v: string | undefined | null) => (v || '').trim().toLowerCase();
    let active = streams.filter(s => s.isActive && norm(s.branchTypeOfDist) === norm(localBranchType));
    if (active.length === 0) active = streams.filter(s => s.isActive);
    // –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ name/id
    const sorted = [...active].sort((a, b) => (a.name || '').localeCompare(b.name || '') || a.id.localeCompare(b.id));
    return sorted.map(s => s.id).join('|');
  }, [streams, localBranchType]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [error, setError] = useState<string | null>(null);
  const [isOnline, setIsOnline] = useState(true);
  const [downloadProgress] = useState(0);
  const [downloadedCount] = useState(0);
  const [totalFiles] = useState(0);
  
  // –û–±–ª–æ–∂–∫–∏ –∞–ª—å–±–æ–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–∞
  const [streamQuality, setStreamQuality] = useState<'high' | 'medium' | 'low'>('high');
  const networkSpeedRef = useRef<number>(0);
  
  // –†–µ—Ç—Ä–∞–π –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const retryCountsRef = useRef<Record<string, number>>({});
  
  // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
  const [nextTrackBuffered, setNextTrackBuffered] = useState(false);
  const nextAudioRef = useRef<HTMLAudioElement | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  // const [isSeeking, setIsSeeking] = useState(false);
  
  const audioRef = useRef<HTMLAudioElement>(null);

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = useCallback((seconds: number): string => {
    if (!isFinite(seconds)) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getBrowserFingerprint = useCallback(() => {
    if (!user?.email) {
      console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID');
      return 'web-unknown';
    }
    
    const storageKey = `dns-radio-web-player-id-${user.email}`;
    let browserId: string | null = null;
    
    try {
      browserId = localStorage.getItem(storageKey);
    } catch (error) {
      console.warn('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    }
    
    if (!browserId) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      browserId = 'web-' + crypto.randomUUID();
      
      try {
        localStorage.setItem(storageKey, browserId);
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', error);
      }
    }
    
    return browserId;
  }, [user?.email]);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const registerWebPlayer = useCallback(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
      if (!isActive) {
        console.log('‚úÖ [WebRadioPlayer] –í–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        return;
      }

      const browserId = getBrowserFingerprint();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!user?.email) {
        console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        return;
      }
      
      const deviceData = {
        userEmail: user.email,
        branchType: localBranchType,
        deviceName: `DNS Radio Web (${user.email.split('@')[0]})`,
        vendor: 'Web Browser',
        network: userIP.includes('.') ? userIP.split('.').slice(0, 3).join('.') + '.' : userIP,
        number: userIP.includes('.') ? userIP.split('.')[3] || '1' : '1',
        app: 'DNS Radio Web',
        os: navigator.userAgent,
        deviceIP: userIP,
        macAddress: browserId
      };

      const response = await fetch(`${API}/device/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(deviceData)
      });

      if (response.ok) {
        // console.log('‚úÖ [WebRadioPlayer] –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
      } else {
        console.log('‚ö†Ô∏è [WebRadioPlayer] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', response.status);
      }
    } catch (err) {
      console.log('‚ö†Ô∏è [WebRadioPlayer] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', err);
    }
  }, [localBranchType, user?.email, getBrowserFingerprint, userIP, isActive]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π
  const loadMusicFolders = useCallback(async () => {
    try {
      const response = await fetch(`${API}/radio/folders`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π');
      }
      
      const data = await response.json();
            if (data.success && data.folders && data.folders.length > 0) {
              // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
              const currentFolder = data.folders[0];
              // console.log('üéµ [WebRadioPlayer] –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å –º—É–∑—ã–∫–æ–π:', currentFolder.name);
              return currentFolder.name;
            }
      return null;
    } catch (err) {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–æ–∫ —Å –º—É–∑—ã–∫–æ–π:', err);
      return null;
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∏ –∏–∑ –ø–∞–ø–∫–∏
  const loadMusicFromFolder = useCallback(async (folderName: string) => {
    try {
      const response = await fetch(`${API}/radio/folder/${folderName}/music`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏');
      }
      
      const data = await response.json();
      if (data.success && data.files) {
        const musicTracks = data.files
          .sort((a: any, b: any) => a.name.localeCompare(b.name)) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
          .map((file: any, index: number) => ({
            id: `${file.name}_${index}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            fileName: file.name,
            url: `${API}/public/retail/radio/music/${folderName}/${file.name}`,
            isDownloaded: false, // –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            fileSize: file.size || 0,
            index: index // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          }));
        setMusicTracks(musicTracks);
        // console.log('üéµ [WebRadioPlayer] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤:', musicTracks.length);
        // console.log('üéµ [WebRadioPlayer] –ü–æ—Ä—è–¥–æ–∫ —Ç—Ä–µ–∫–æ–≤:', musicTracks.map((t: any) => `${t.index}: ${t.fileName}`));
        return musicTracks;
      }
      return [];
    } catch (err) {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—É–∑—ã–∫–∏:', err);
      return [];
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤
  const loadStreams = useCallback(async () => {
    try {
      setError(null);
      
      const response = await fetch(`${API}/radio/streams`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–æ–≤');
      }
      
      const data = await response.json();
      if (data.success && data.data) {
        setStreams(data.data);
      }
    } catch (err) {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–æ–≤:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }, []);

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∞
  useEffect(() => {
    try {
      const saved = localStorage.getItem(rotationStorageKey);
      if (saved !== null) {
        const parsed = parseInt(saved, 10);
        if (!Number.isNaN(parsed)) {
          lastPlayedStreamIndexRef.current = parsed;
          // state index removed; ref is authoritative
        }
      }
    } catch {}
  }, [rotationStorageKey]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ (–∫–∞–∫ Android setActiveStreams)
  useEffect(() => {
    // state index removed
    try { localStorage.setItem(rotationStorageKey, String(-1)); } catch {}
  }, [activeStreamsFingerprint, rotationStorageKey]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const initializePlayer = async () => {
      // –ü–æ–ª—É—á–∞–µ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await getUserIP();
      
      await loadStreams();
      const folderName = await loadMusicFolders();
      if (folderName) {
        await loadMusicFromFolder(folderName);
      }
    };
    initializePlayer();
  }, [getUserIP, loadStreams, loadMusicFolders, loadMusicFromFolder]);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  const [isRegistered, setIsRegistered] = useState(false);
  
  useEffect(() => {
    if (!isRegistered) {
      registerWebPlayer().then(() => {
        setIsRegistered(true);
      });
    }
  }, [registerWebPlayer, isRegistered]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
  const isWithinWorkingTime = useCallback((): boolean => {
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    
    const [startHour, startMin] = workingTime.start.split(':').map(Number);
    const [endHour, endMin] = workingTime.end.split(':').map(Number);
    
    const startTime = startHour * 60 + startMin;
    const endTime = endHour * 60 + endMin;
    
    if (startTime < endTime) {
      // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 08:00 - 22:00
      return currentTime >= startTime && currentTime <= endTime;
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 22:00 - 06:00
      return currentTime >= startTime || currentTime <= endTime;
    }
  }, [workingTime]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const checkInternetConnection = useCallback(async () => {
    try {
      const response = await fetch(`${API}/radio/streams`, { 
        method: 'HEAD',
        cache: 'no-cache'
      });
      setIsOnline(response.ok);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
      if (response.ok && (navigator as any).connection) {
        const connection = (navigator as any).connection;
        const downlink = connection.downlink || 0;
        networkSpeedRef.current = downlink;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (downlink >= 5) {
          setStreamQuality('high');
        } else if (downlink >= 2) {
          setStreamQuality('medium');
        } else {
          setStreamQuality('low');
        }
      }
    } catch {
      setIsOnline(false);
    }
  }, [API]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
  useEffect(() => {
    const interval = setInterval(() => {
      const withinTime = isWithinWorkingTime();
      if (!withinTime && playbackState === 'playing') {
        setPlaybackState('stopped');
        if (audioRef.current) {
          audioRef.current.pause();
        }
      }
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [isWithinWorkingTime, playbackState]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  useEffect(() => {
    const interval = setInterval(checkInternetConnection, 10000);
    checkInternetConnection(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
    return () => clearInterval(interval);
  }, [checkInternetConnection]);

  // –ì—Ä–æ–º–∫–æ—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∑–≤—É–∫–∞
  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = 1;
    }
  }, []);

  // Heartbeat –¥–ª—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞
  const sendHeartbeat = useCallback(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
      if (!isActive) {
        return;
      }

      const browserId = getBrowserFingerprint();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!user?.email) {
        return;
      }
      
      const heartbeatData = {
        deviceName: `DNS Radio Web (${user.email.split('@')[0]})`,
        appVersion: '1.1.4',
        macAddress: browserId,
        currentIP: userIP,
        userEmail: user.email
      };

      // console.log('üîç [WebRadioPlayer] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat:', heartbeatData);

      const response = await fetch(`${API}/device/heartbeat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(heartbeatData)
      });

      if (response.ok) {
        // console.log('üíì [WebRadioPlayer] Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }
    } catch (err) {
      console.log('‚ö†Ô∏è [WebRadioPlayer] –û—à–∏–±–∫–∞ heartbeat:', err);
    }
  }, [getBrowserFingerprint, user?.email, userIP, isActive]);

  // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞/–ø–æ—Ç–æ–∫–∞
  const findNextTrack = useCallback((songsCount: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª–∏–Ω–∏—Ç—å –ø–æ—Ç–æ–∫
    // –ö–∞–∂–¥—ã–π 4-–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Ç–æ–∫–æ–º (–ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 3-—Ö —Ç—Ä–µ–∫–æ–≤)
    // –°—Ö–µ–º–∞: 1—Ç—Ä–µ–∫, 2—Ç—Ä–µ–∫, 3—Ç—Ä–µ–∫, –ø–æ—Ç–æ–∫, 4—Ç—Ä–µ–∫, 5—Ç—Ä–µ–∫, 6—Ç—Ä–µ–∫, –ø–æ—Ç–æ–∫...
    // songsCount: 3(–ø–æ—Å–ª–µ 3-–≥–æ —Ç—Ä–µ–∫–∞) -> –ø–æ—Ç–æ–∫
    // songsCount: 7(–ø–æ—Å–ª–µ 6-–≥–æ —Ç—Ä–µ–∫–∞) -> –ø–æ—Ç–æ–∫
    // Android logic: every 3 songs, insert a stream (3, 6, 9, ...)
    const shouldPlayStream = songsCount > 0 && songsCount % 3 === 0;
    
    if (shouldPlayStream && streams.length > 0) {
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –ø–æ —Ç–∏–ø—É —Ñ–∏–ª–∏–∞–ª–∞, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Å trim
      const norm = (v: string | undefined | null) => (v || '').trim().toLowerCase();
      let activeStreams = streams.filter(stream => 
        stream.isActive && norm(stream.branchTypeOfDist) === norm(localBranchType)
      );

      // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –ø–æ —Ç–∏–ø—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
      if (activeStreams.length === 0) {
        activeStreams = streams.filter(stream => stream.isActive);
      }

      if (activeStreams.length > 0) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∫ –≤ Android –≤–µ—Ä—Å–∏–∏ (–±–µ–∑ —Å–∞–π–¥-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∑–¥–µ—Å—å)
        const currentIndex = lastPlayedStreamIndexRef.current;
        const nextStreamIndex = (currentIndex + 1) % activeStreams.length;
        const nextStream = activeStreams[nextStreamIndex];
        
        console.log('[WebRadio] Simple rotation:',
          `songsCount=${songsCount}`,
          `lastIndex=${currentIndex}`,
          `nextIndex=${nextStreamIndex}`,
          `selected=${nextStream?.name}`
        );

        return { type: 'stream', content: nextStream, index: nextStreamIndex } as const;
      }
    }
    
    // –ò–Ω–∞—á–µ –∏–≥—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
    if (musicTracks.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º lastTrackIndex –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
      const currentIndex = lastTrackIndex >= 0 ? lastTrackIndex : -1;
      const nextIndex = currentIndex >= 0 ? (currentIndex + 1) % musicTracks.length : 0;
      const nextTrack = musicTracks.find(track => track.index === nextIndex);
      
      if (nextTrack) {
        return { type: 'track', content: nextTrack } as const;
      }
    }
    
    return null;
  }, [streams, musicTracks, lastTrackIndex, localBranchType, rotationStorageKey]);

  // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
  const bufferNextTrack = useCallback(async () => {
    if (!nextAudioRef.current) {
      nextAudioRef.current = document.createElement('audio');
      nextAudioRef.current.preload = 'auto';
      nextAudioRef.current.crossOrigin = 'anonymous';
    }
    
    const nextContent = findNextTrack(songsPlayed + 1);
    if (!nextContent || nextContent.type === 'stream') {
      setNextTrackBuffered(false);
      return;
    }
    
    const nextTrack = nextContent.content as MusicTrack;
    if (nextTrack.url) {
      setNextTrackBuffered(false);
      const audio = nextAudioRef.current;
      audio.src = nextTrack.url;
      audio.load();
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
      const interval = setInterval(() => {
        if (audio && audio.buffered.length > 0 && audio.readyState >= 2) {
          setNextTrackBuffered(true);
          clearInterval(interval);
        }
      }, 100);
      
      setTimeout(() => clearInterval(interval), 10000);
    }
  }, [findNextTrack, songsPlayed]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
  const playTrack = useCallback(async (track: MusicTrack) => {
    if (!audioRef.current) return;
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
      if (audioRef.current && !audioRef.current.paused) {
        audioRef.current.pause();
        await new Promise((r) => setTimeout(r, 50));
      }
      
      setPlaybackState('loading');
      setPendingTrack(track);
      setLastTrackIndex(track.index);
      setCurrentStream(null);
      setIsPlayingStream(false);
      
      audioRef.current.src = track.url;
      await audioRef.current.play();
      setPlaybackState('playing');
      setCurrentTrack(track);
      setPendingTrack(null);
      setError(null);
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º AbortError - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
      if ((err as Error).name !== 'AbortError') {
        console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫');
      }
      setPlaybackState('error');
    }
  }, []);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
  const playStream = useCallback(async (stream: RadioStream, rotationIndex?: number) => {
    if (!audioRef.current) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–º–µ–µ—Ç —Ñ–∞–π–ª
    if (!stream.isActive) {
      console.error('‚ùå [WebRadioPlayer] –ü–æ—Ç–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω:', stream.name);
      setError('–ü–æ—Ç–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      setPlaybackState('error');
      return;
    }

    if (!stream.attachment) {
      console.error('‚ùå [WebRadioPlayer] –£ –ø–æ—Ç–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞:', stream.name);
      setError('–£ –ø–æ—Ç–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      setPlaybackState('error');
      return;
    }

    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
      if (audioRef.current && !audioRef.current.paused) {
        audioRef.current.pause();
        await new Promise((r) => setTimeout(r, 50));
      }
      
      setPlaybackState('loading');
      // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã UI –ø–æ–∫–∞–∑—ã–≤–∞–ª pendingStream
      setCurrentStream(null);
      setPendingStream(stream);
      setIsPlayingStream(true);
      
      const qualityParam = streamQuality === 'high' ? '?quality=high' : 
                           streamQuality === 'medium' ? '?quality=medium' : '?quality=low';
      const bust = `&ts=${Date.now()}&rand=${Math.random().toString(36).slice(2)}`;
      const streamUrl = `${API}/radio/stream/${stream.id}/play${qualityParam}${bust}`;
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
      audioRef.current.pause();
      audioRef.current.removeAttribute('src');
      audioRef.current.load();
      audioRef.current.src = streamUrl;
      console.log('[WebRadio] Applying stream URL:', streamUrl);
      await audioRef.current.load();
      await audioRef.current.play();
      console.log('[WebRadio] Audio element src after play:', audioRef.current.currentSrc || audioRef.current.src);
      setPlaybackState('playing');
      setCurrentStream(stream);
      setPendingStream(null);
      setError(null);

      // –§–∏–∫—Å–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å —Ä–æ—Ç–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å –ø–æ—Ç–æ–∫
      if (typeof rotationIndex === 'number') {
        lastPlayedStreamIndexRef.current = rotationIndex;
        // state index removed; ref + localStorage are authoritative
        try { localStorage.setItem(rotationStorageKey, String(rotationIndex)); } catch {}
      }
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º AbortError
      if ((err as Error).name !== 'AbortError') {
        console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ—Ç–æ–∫');
      }
      setPlaybackState('error');
    }
  }, [API, streamQuality, rotationStorageKey]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∞—É–¥–∏–æ
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const handleTimeUpdate = () => {
      if (audio) {
        setCurrentTime(audio.currentTime);
      }
    };

    const handleLoadedMetadata = () => {
      if (audio) {
        setDuration(audio.duration || 0);
      }
    };

  const handleEnded = async () => {
    // Android: –ø—Ä–∏ –ª—é–±–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ (—Ç—Ä–µ–∫/–ø–æ—Ç–æ–∫) —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Å–µ–Ω –Ω–∞ 1
    const nextSongsPlayed = songsPlayed + 1;
    setSongsPlayed(nextSongsPlayed);

    if (isPlayingStream) {
      // –ï—Å–ª–∏ –∏–≥—Ä–∞–ª –ø–æ—Ç–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º—É–∑—ã–∫—É
      setIsPlayingStream(false);
      setCurrentStream(null);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    const nextContent = findNextTrack(nextSongsPlayed);
    
    if (nextContent) {
      if (nextContent.type === 'track') {
        await playTrack(nextContent.content as MusicTrack);
      } else if (nextContent.type === 'stream') {
        await playStream(nextContent.content as RadioStream, (nextContent as any).index);
      }
    } else {
      setPlaybackState('stopped');
    }
    
    // –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    setTimeout(() => {
      bufferNextTrack();
    }, 500);
  };

    const handleError = (event: any) => {
      console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', event);
      console.error('‚ùå [WebRadioPlayer] Error details:', event.target?.error);
      console.error('‚ùå [WebRadioPlayer] Audio src:', event.target?.src);
      console.error('‚ùå [WebRadioPlayer] Audio networkState:', event.target?.networkState);
      console.error('‚ùå [WebRadioPlayer] Audio readyState:', event.target?.readyState);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
      
      if (event.target?.error) {
        const error = event.target.error;
        switch (error.code) {
          case error.MEDIA_ERR_ABORTED:
            errorMessage = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ';
            break;
          case error.MEDIA_ERR_NETWORK:
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ';
            break;
          case error.MEDIA_ERR_DECODE:
            errorMessage = '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ';
            break;
          case error.MEDIA_ERR_SRC_NOT_SUPPORTED:
            errorMessage = '–§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω';
            break;
        }
      }
      
      setError(errorMessage);
      setPlaybackState('error');

      // –†–µ—Ç—Ä–∞–π —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const src = (event?.target?.src as string) || '';
      if (src) {
        const count = retryCountsRef.current[src] || 0;
        if (count < 3) {
          retryCountsRef.current[src] = count + 1;
          const delay = Math.pow(2, count) * 1000;
          setTimeout(async () => {
            try {
              if (!audioRef.current) return;
              audioRef.current.load();
              await audioRef.current.play();
              setPlaybackState('playing');
              setError(null);
            } catch (e) {
              // –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –æ—Å—Ç–∞–≤–∏–º –æ—à–∏–±–∫—É
            }
          }, delay);
        }
      }
    };

    const handleStalled = () => {
      // –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - –±—Ä–∞—É–∑–µ—Ä –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    };

    const handleWaiting = () => {
      // –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - –±—Ä–∞—É–∑–µ—Ä –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    };

    const handleCanPlay = () => {
      // –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
    };

    const handleCanPlayThrough = () => {
      // –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
    };

    const handleLoadStart = () => {
      // –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
    };

    audio.addEventListener('timeupdate', handleTimeUpdate);
    audio.addEventListener('loadedmetadata', handleLoadedMetadata);
    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);
    audio.addEventListener('stalled', handleStalled);
    audio.addEventListener('waiting', handleWaiting);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('canplaythrough', handleCanPlayThrough);
    audio.addEventListener('loadstart', handleLoadStart);

    return () => {
      audio.removeEventListener('timeupdate', handleTimeUpdate);
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
      audio.removeEventListener('stalled', handleStalled);
      audio.removeEventListener('waiting', handleWaiting);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('canplaythrough', handleCanPlayThrough);
      audio.removeEventListener('loadstart', handleLoadStart);
    };
  }, [findNextTrack, playTrack, playStream, isPlayingStream]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
  useEffect(() => {
    if (!isActive) {
      return; // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    }
    
    const interval = setInterval(sendHeartbeat, 30000);
    sendHeartbeat(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    return () => clearInterval(interval);
  }, [sendHeartbeat, isActive]);

  // –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    if (!isActive && playbackState === 'playing') {
      // console.log('üîÑ [WebRadioPlayer] –í–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä');
      setPlaybackState('paused');
      if (audioRef.current) {
        audioRef.current.pause();
      }
    }
  }, [isActive, playbackState]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const handlePlayPause = async () => {
    if (!audioRef.current) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if (!isWithinWorkingTime()) {
      setError('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ');
      return;
    }

    if (playbackState === 'playing') {
      audioRef.current.pause();
      setPlaybackState('paused');
    } else if (playbackState === 'paused') {
      try {
        await audioRef.current.play();
        setPlaybackState('playing');
        setError(null);
      } catch (err) {
        console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
        setPlaybackState('error');
      }
    } else if (playbackState === 'stopped' || playbackState === 'error') {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –∏–ª–∏ —Ç—Ä–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
      if (currentStream) {
        try {
          await playStream(currentStream);
        } catch (err) {
          console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞:', err);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫');
        }
      } else if (currentTrack) {
        try {
          await playTrack(currentTrack);
        } catch (err) {
          console.error('‚ùå [WebRadioPlayer] –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', err);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫');
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞
        const nextContent = findNextTrack(songsPlayed);
        if (nextContent) {
          if (nextContent.type === 'track') {
            await playTrack(nextContent.content as MusicTrack);
          } else if (nextContent.type === 'stream') {
            await playStream(nextContent.content as RadioStream, (nextContent as any).index);
          }
        } else {
          setError('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
        }
      }
    } else {
      // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      const nextContent = findNextTrack(songsPlayed);
      if (nextContent) {
        if (nextContent.type === 'track') {
          await playTrack(nextContent.content as MusicTrack);
        } else if (nextContent.type === 'stream') {
          await playStream(nextContent.content as RadioStream, (nextContent as any).index);
        }
      } else {
        setError('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      }
    }
  };

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
   const handleNextTrack = async () => {
     if (!audioRef.current) return;
     
     // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
     audioRef.current.pause();
     
     // –í—ã–∑—ã–≤–∞–µ–º handleEnded –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
     const audio = audioRef.current;
     if (audio) {
       audio.dispatchEvent(new Event('ended'));
     }
   };


  return (
    <Box className={`web-radio-player ${className || ''}`}>
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ */}
      {!isOnline && (
        <Paper 
          p="sm" 
          mb="md" 
          radius="md"
          style={{
            background: 'var(--color-error-100)',

            display: 'flex',
            alignItems: 'center',
            gap: 'var(--space-2)'
          }}
        >
          <IconWifiOff size={20} color="var(--color-error-500)" />
          <Text size="sm" c="red" fw={500}>
            –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
          </Text>
          <Text size="xs" c="dimmed" ml="auto">
            –†–∞–±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
          </Text>
        </Paper>
      )}

      <Paper 
        p="xl" 
        radius="lg" 
        shadow="sm"
        style={{
          background: 'var(--theme-bg-elevated)',

          backdropFilter: 'blur(8px)',
          WebkitBackdropFilter: 'blur(8px)',
          minHeight: '500px',
          position: 'relative'
        }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º */}
        <Group justify="space-between" align="center" mb="xl">
          <Group gap="md" align="center">
            <Box>
              <Text size="xs" c="dimmed" style={{ fontFamily: 'var(--font-family-primary)' }}>
                {new Date().toLocaleDateString('ru-RU', { 
                  month: 'long', 
                  year: 'numeric' 
                })} 
              </Text>
              <Text size="sm" c="dimmed" style={{ fontFamily: 'var(--font-family-primary)' }}>
                {new Date().toLocaleDateString('ru-RU')}
              </Text>

            </Box>
          </Group>
          
          <Group gap="xs" align="center">
            <IconWifi 
              size={20} 
              color={isOnline ? 'var(--color-success-500)' : 'var(--color-error-500)'} 
            />
            <Text size="xs" c={isOnline ? 'green' : 'red'}>
              {isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
            </Text>
          </Group>
        </Group>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –∫–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
        <Box
          style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '300px',
            gap: 'var(--space-4)'
          }}
        >
                     {/* –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
           <Group gap="md" align="center">
             {/* –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
             <Button
               size="xl"
               radius="xl"
               leftSection={
                 playbackState === 'loading' ? 
                   <div style={{ 
                     width: '32px', 
                     height: '32px', 
                     
                     borderTop: '3px solid transparent', 
                     borderRadius: '50%', 
                     animation: 'spin 1s linear infinite' 
                   }} /> :
                   playbackState === 'playing' ? 
                     <IconPlayerPause size={32} /> : 
                     <IconPlayerPlay size={32} />
               }
               onClick={handlePlayPause}
              disabled={!isWithinWorkingTime() || playbackState === 'loading' || (musicTracks.length === 0 && streams.length === 0)}
               style={{
                 width: '80px',
                 height: '80px',
                 background: playbackState === 'loading' ? 
                   'linear-gradient(135deg, var(--color-gray-500), var(--color-gray-600))' :
                   'linear-gradient(135deg, var(--color-primary-500), var(--color-primary-600))',
                 border: 'none',
                 boxShadow: 'var(--theme-shadow-lg)',
                 borderRadius: '50%',
                 display: 'flex',
                 alignItems: 'center',
                 justifyContent: 'center'
               }}
             />
             
                           {/* –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º */}
              {hasRadioFullAccess && (
                <Button
                  size="lg"
                  radius="xl"
                  leftSection={<IconPlayerSkipForward size={24} />}
                  onClick={handleNextTrack}
                  disabled={!isWithinWorkingTime() || (!currentStream && !currentTrack)}
                  variant="light"
                  style={{
                    background: 'var(--theme-bg-elevated)',
                    border: '1px solid var(--theme-border)',
                    boxShadow: 'var(--theme-shadow-sm)'
                  }}
                >
                  –î–∞–ª–µ–µ
                </Button>
              )}
           </Group>

          {/* –†–µ–≥—É–ª—è—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É */}

          {/* –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫/–ø–æ—Ç–æ–∫ */}
          <Box style={{ textAlign: 'center', maxWidth: '400px' }}>
            {isPlayingStream && (pendingStream || currentStream) ? (
              <Stack gap="xs" align="center">
                <Text size="xl" fw={600} style={{ color: 'var(--theme-text-primary)' }}>
                  üìª {(pendingStream || currentStream)!.name}
                </Text>
                <Text size="sm" c="dimmed">
                  {(pendingStream || currentStream)!.branchTypeOfDist}
                </Text>
                <Text size="xs" c="dimmed">
                  –†–∞–¥–∏–æ –ø–æ—Ç–æ–∫
                </Text>
              </Stack>
            ) : (currentTrack || pendingTrack) ? (
              <Stack gap="xs" align="center">
                <Text size="xl" fw={600} style={{ color: 'var(--theme-text-primary)' }}>
                  üéµ {(currentTrack || pendingTrack)!.fileName.replace('.mp3', '')}
                </Text>
                <Text size="sm" c="dimmed">
                  –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
                </Text>
                {musicTracks.length > 0 && (
                  <Text size="xs" c="dimmed">
                    –¢—Ä–µ–∫–æ–≤: {musicTracks.length} ‚Ä¢ –°—ã–≥—Ä–∞–Ω–æ: {songsPlayed}
                  </Text>
                )}
              </Stack>
            ) : (
              <Stack gap="xs" align="center">
                <Text size="lg" c="dimmed" ta="center">
                  {!isWithinWorkingTime() ? '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ' : 
                   musicTracks.length > 0 ? '–ù–∞–∂–º–∏—Ç–µ Play –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è' : '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º—É–∑—ã–∫–∞...'}
                </Text>
                {musicTracks.length > 0 && (
                  <Text size="xs" c="dimmed">
                    –¢—Ä–µ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {musicTracks.length}
                  </Text>
                )}
              </Stack>
            )}
          </Box>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
          {duration > 0 && (
            <Box style={{ width: '100%', maxWidth: '400px' }}>
              <Progress 
                value={(currentTime / duration) * 100} 
                size="md" 
                radius="xl"
                style={{ marginBottom: 'var(--space-2)' }}
              />
              <Group justify="space-between" gap="xs">
                <Text size="xs" c="dimmed">
                  {formatTime(currentTime)}
                </Text>
                <Text size="xs" c="dimmed">
                  {formatTime(duration)}
                </Text>
              </Group>
            </Box>
          )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ */}
        {nextTrackBuffered && (
          <Box style={{ width: '100%', maxWidth: '400px' }}>
            <Text size="xs" c="dimmed" ta="center">
              ‚úì –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≥–æ—Ç–æ–≤
            </Text>
          </Box>
        )}

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {downloadState === 'downloading' && (
            <Box style={{ width: '100%', maxWidth: '300px' }}>
              <Progress 
                value={downloadProgress} 
                size="sm" 
                radius="xl"
                style={{ marginBottom: 'var(--space-2)' }}
              />
              <Text size="xs" c="dimmed" ta="center">
                –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloadedCount} –∏–∑ {totalFiles} —Ñ–∞–π–ª–æ–≤
              </Text>
            </Box>
          )}
        </Box>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ –≤–Ω–∏–∑—É */}
        <Box
          style={{
            position: 'absolute',
            bottom: '24px',
            left: '24px',
            right: '24px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'flex-end'
          }}
        >
          <Box>
            <Text size="xl" fw={500} style={{ color: 'var(--theme-text-primary)' }}>
              {branchName}
            </Text>
            <Group gap="xs" align="center" mt="xs">
              <Text size="sm" c="dimmed">
                {localBranchType} ({workingTime.start} ‚Äî {workingTime.end})
              </Text>
              <Button
                variant="subtle"
                size="xs"
                color="blue"
                onClick={openBranchTypeModal}
              >
                –°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
              </Button>
              {onTimeChange && (
                <Button
                  variant="subtle"
                  size="xs"
                  color="blue"
                  onClick={openTimeModal}
                  leftSection={<IconClock size={12} />}
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è
                </Button>
              )}
            </Group>
          </Box>
          
          <Box style={{ textAlign: 'right' }}>
            <Group gap="xs" align="center" mb="xs">
              <IconClock size={16} color="var(--theme-text-secondary)" />
              <Text size="xs" c="dimmed">
                {isWithinWorkingTime() ? '–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è' : '–í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'}
              </Text>
            </Group>
            <Group gap="xs" align="center">
              <IconBug size={14} color="var(--theme-text-secondary)" />
              <Text size="xs" c="dimmed">
                –í–µ—Ä—Å–∏—è: 1.1.4
              </Text>
            </Group>
            {downloadState === 'complete' && (
              <Text size="xs" c="dimmed">
                –ì–æ—Ç–æ–≤–æ: {downloadedCount} —Ñ–∞–π–ª–æ–≤ ‚Ä¢ v1.1.4
              </Text>
            )}
          </Box>
        </Box>
      </Paper>

      

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <Paper 
          p="sm" 
          radius="md" 
          mt="md"
          style={{ 
            background: 'var(--color-error-100)', 
            
          }}
        >
          <Text size="sm" c="red">
            {error}
          </Text>
        </Paper>
      )}

      {/* –°–∫—Ä—ã—Ç—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç */}
      <audio 
        ref={audioRef} 
        preload="auto"
        crossOrigin="anonymous"
        playsInline
        controls={false}
        style={{ display: 'none' }}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª–∏–∞–ª–∞ */}
      <CustomModal
        opened={branchTypeModalOpen}
        onClose={closeBranchTypeModal}
        title="–í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∏–ª–∏–∞–ª–∞"
        size="sm"
      >
        <Stack gap="md">
          <Text size="sm" c="dimmed">
            –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–∞–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤
          </Text>
          
          <Select
            label="–¢–∏–ø —Ñ–∏–ª–∏–∞–ª–∞"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª–∏–∞–ª–∞"
            value={tempBranchType}
            onChange={(value) => setTempBranchType(value || '–ú–∞–≥–∞–∑–∏–Ω')}
            data={[
              { value: '–ú–∞–≥–∞–∑–∏–Ω', label: '–ú–∞–≥–∞–∑–∏–Ω' },
              { value: '–°–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', label: '–°–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' },
              { value: '–ö–æ–Ω–≤–µ–µ—Ä', label: '–ö–æ–Ω–≤–µ–µ—Ä' },
              { value: '–¢–µ—Ö–Ω–æ–ø–æ–∏–Ω—Ç', label: '–¢–µ—Ö–Ω–æ–ø–æ–∏–Ω—Ç' }
            ]}
          />
          
          <Group justify="flex-end" gap="sm" mt="md">
            <Button
              variant="subtle"
              onClick={closeBranchTypeModal}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              onClick={saveBranchTypeChanges}
              disabled={!tempBranchType}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </Group>
        </Stack>
      </CustomModal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ */}
      <CustomModal
        opened={timeModalOpen}
        onClose={closeTimeModal}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
        icon={<IconClock size={20} />}
        size="sm"
      >
        <Stack gap="md">
          <Text size="sm" c="dimmed">
            –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏
          </Text>
          
          <Group grow>
            <Stack gap="xs">
              <Text size="sm" fw={500}>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</Text>
              <TextInput
                type="time"
                value={tempTimeStart}
                onChange={(e) => setTempTimeStart(e.target.value)}
                placeholder="HH:MM"
              />
            </Stack>
            
            <Stack gap="xs">
              <Text size="sm" fw={500}>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</Text>
              <TextInput
                type="time"
                value={tempTimeEnd}
                onChange={(e) => setTempTimeEnd(e.target.value)}
                placeholder="HH:MM"
              />
            </Stack>
          </Group>
          
          <Group justify="flex-end" gap="sm" mt="md">
            <Button
              variant="subtle"
              onClick={closeTimeModal}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              onClick={saveTimeChanges}
              disabled={!tempTimeStart || !tempTimeEnd}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </Group>
        </Stack>
      </CustomModal>
    </Box>
  );
};

export default WebRadioPlayer;
